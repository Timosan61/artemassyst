"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
"""
import uuid
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
import logging

logger = logging.getLogger(__name__)


class SessionManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""

    def __init__(self):
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
        self.active_sessions: Dict[str, Dict[str, Any]] = {}
        # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (24 —á–∞—Å–∞)
        self.session_ttl = 24 * 60 * 60

    def generate_session_id(self, user_id: str, chat_id: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ –≤—Ä–µ–º–µ–Ω–∏

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            chat_id: ID —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)

        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ: user_timestamp_uuid
        """
        timestamp = int(time.time())
        unique_part = uuid.uuid4().hex[:8]

        # –ë–∞–∑–æ–≤—ã–π session_id
        base_id = f"{user_id}_{timestamp}_{unique_part}"

        # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º chat_id
        if chat_id and chat_id != user_id:
            base_id = f"group_{chat_id}_{base_id}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        self.active_sessions[base_id] = {
            'user_id': user_id,
            'chat_id': chat_id,
            'created_at': timestamp,
            'last_activity': timestamp,
            'question_history': set(),  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            'data_collected': {}  # –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        }

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {base_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return base_id

    def get_or_create_session(self, user_id: str, chat_id: Optional[str] = None,
                            existing_session_id: Optional[str] = None) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            existing_session_id: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π session_id (–µ—Å–ª–∏ –µ—Å—Ç—å)

        Returns:
            session_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if existing_session_id and self.is_session_active(existing_session_id):
            self.update_session_activity(existing_session_id)
            logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {existing_session_id}")
            return existing_session_id

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        new_session_id = self.generate_session_id(user_id, chat_id)
        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return new_session_id

    def is_session_active(self, session_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        if session_id not in self.active_sessions:
            return False

        session_data = self.active_sessions[session_id]
        current_time = int(time.time())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if current_time - session_data['last_activity'] > self.session_ttl:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
            del self.active_sessions[session_id]
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
            return False

        return True

    def update_session_activity(self, session_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if session_id in self.active_sessions:
            self.active_sessions[session_id]['last_activity'] = int(time.time())

    def record_asked_question(self, session_id: str, question: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        if session_id in self.active_sessions:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            normalized_question = self._normalize_question(question)
            self.active_sessions[session_id]['question_history'].add(normalized_question)
            logger.debug(f"üìù –ó–∞–ø–∏—Å–∞–Ω –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ {session_id}: {normalized_question}")

    def was_question_asked(self, session_id: str, question: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if session_id not in self.active_sessions:
            return False

        normalized_question = self._normalize_question(question)
        was_asked = normalized_question in self.active_sessions[session_id]['question_history']

        if was_asked:
            logger.info(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–¥–∞–≤–∞–ª—Å—è –≤ —Å–µ—Å—Å–∏–∏ {session_id}: {normalized_question}")

        return was_asked

    def record_collected_data(self, session_id: str, data_type: str, value: Any):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if session_id in self.active_sessions:
            self.active_sessions[session_id]['data_collected'][data_type] = value
            logger.debug(f"üìä –ó–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ {data_type} –≤ —Å–µ—Å—Å–∏—é {session_id}")

    def has_collected_data(self, session_id: str, data_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if session_id not in self.active_sessions:
            return False

        has_data = data_type in self.active_sessions[session_id]['data_collected']

        if has_data:
            logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ {data_type} —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –≤ —Å–µ—Å—Å–∏–∏ {session_id}")

        return has_data

    def get_session_info(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏"""
        return self.active_sessions.get(session_id)

    def cleanup_expired_sessions(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏"""
        current_time = int(time.time())
        expired_sessions = []

        for session_id, session_data in self.active_sessions.items():
            if current_time - session_data['last_activity'] > self.session_ttl:
                expired_sessions.append(session_id)

        for session_id in expired_sessions:
            del self.active_sessions[session_id]
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è: {session_id}")

    def _normalize_question(self, question: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        normalized = question.lower().strip()

        # –£–¥–∞–ª—è–µ–º common words that don't affect meaning
        stop_words = {'–¥–ª—è', '–∏–ª–∏', '–∫–∞–∫', '–≤—ã', '—Å–µ–π—á–∞—Å', '–≤', '–Ω–∞', '–ø–æ'}
        words = normalized.split()
        filtered_words = [word for word in words if word not in stop_words]

        return ' '.join(filtered_words)

    def get_session_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
        total_sessions = len(self.active_sessions)

        if total_sessions == 0:
            return {
                'total_sessions': 0,
                'active_sessions': 0,
                'avg_questions_per_session': 0
            }

        total_questions = sum(
            len(session['question_history'])
            for session in self.active_sessions.values()
        )

        return {
            'total_sessions': total_sessions,
            'active_sessions': total_sessions,  # –í—Å–µ –≤ active_sessions —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
            'avg_questions_per_session': total_questions / total_sessions,
            'oldest_session': min(
                session['created_at']
                for session in self.active_sessions.values()
            ),
            'newest_session': max(
                session['created_at']
                for session in self.active_sessions.values()
            )
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
session_manager = SessionManager()