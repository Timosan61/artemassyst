"""
Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–æ—Ç–∞ –ê–ª–µ–Ω–∞
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ ZEP Cloud —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import os

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from .sheets_config import (
    SCOPES, CREDENTIALS_FILE, TOKEN_FILE, SPREADSHEET_NAME,
    SHEET_CONFIGURATIONS, DEFAULT_SYNC_INTERVAL, BATCH_SIZE,
    TARGET_EMAIL
)
from ..memory.memory_service import MemoryService
from ..memory.analytics import AnalyticsService

logger = logging.getLogger(__name__)


class GoogleSheetsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ZEP Cloud"""
    
    def __init__(self, memory_service: MemoryService, analytics_service: AnalyticsService):
        self.memory_service = memory_service
        self.analytics_service = analytics_service
        self.service = None
        self.spreadsheet_id = None
        self._authenticated = False
    
    async def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ OAuth2 –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
        try:
            creds = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
            if os.path.exists(TOKEN_FILE):
                creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å–∫–∞–µ–º OAuth —Ñ–ª–æ—É
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                    await asyncio.to_thread(creds.refresh, Request())
                    logger.info("üîÑ Google Sheets —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π OAuth —Ñ–ª–æ—É
                    flow = InstalledAppFlow.from_client_secrets_file(
                        CREDENTIALS_FILE, SCOPES)
                    creds = await asyncio.to_thread(flow.run_local_server, port=0)
                    logger.info("‚úÖ –ù–æ–≤—ã–π Google Sheets —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                with open(TOKEN_FILE, 'w') as token:
                    token.write(creds.to_json())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Google Sheets API
            self.service = await asyncio.to_thread(
                build, 'sheets', 'v4', credentials=creds
            )
            self._authenticated = True
            logger.info("üéØ Google Sheets API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets: {e}")
            self._authenticated = False
            return False
    
    async def create_spreadsheet(self) -> Optional[str]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Google —Ç–∞–±–ª–∏—Ü—É —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ª–∏—Å—Ç–æ–≤"""
        if not self._authenticated:
            if not await self.authenticate():
                return None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = {
                'properties': {
                    'title': SPREADSHEET_NAME,
                    'locale': 'ru_RU',
                    'timeZone': 'Europe/Moscow'
                },
                'sheets': []
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for sheet_key, sheet_config in SHEET_CONFIGURATIONS.items():
                sheet = {
                    'properties': {
                        'title': sheet_config['name'],
                        'gridProperties': {
                            'rowCount': 1000,
                            'columnCount': len(sheet_config['headers'])
                        }
                    }
                }
                spreadsheet['sheets'].append(sheet)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            result = await asyncio.to_thread(
                self.service.spreadsheets().create,
                body=spreadsheet
            )
            
            response = await asyncio.to_thread(result.execute)
            self.spreadsheet_id = response['spreadsheetId']
            
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ Google —Ç–∞–±–ª–∏—Ü–∞: {self.spreadsheet_id}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
            await self._setup_sheet_headers()
            
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø —Ü–µ–ª–µ–≤–æ–º—É email
            await self._share_spreadsheet()
            
            logger.info(f"‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞: https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}")
            return self.spreadsheet_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None
    
    async def _setup_sheet_headers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.spreadsheet_id:
            return
        
        try:
            requests = []
            
            for sheet_key, sheet_config in SHEET_CONFIGURATIONS.items():
                # –ü–æ–ª—É—á–∞–µ–º ID –ª–∏—Å—Ç–∞
                sheet_metadata = await asyncio.to_thread(
                    self.service.spreadsheets().get,
                    spreadsheetId=self.spreadsheet_id
                )
                
                sheets_info = await asyncio.to_thread(sheet_metadata.execute)
                sheet_id = None
                
                for sheet in sheets_info['sheets']:
                    if sheet['properties']['title'] == sheet_config['name']:
                        sheet_id = sheet['properties']['sheetId']
                        break
                
                if sheet_id is None:
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                header_values = [[header for header in sheet_config['headers']]]
                
                requests.append({
                    'updateCells': {
                        'range': {
                            'sheetId': sheet_id,
                            'startRowIndex': 0,
                            'endRowIndex': 1,
                            'startColumnIndex': 0,
                            'endColumnIndex': len(sheet_config['headers'])
                        },
                        'rows': [{
                            'values': [{
                                'userEnteredValue': {'stringValue': header},
                                'userEnteredFormat': {
                                    'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9},
                                    'textFormat': {'bold': True}
                                }
                            } for header in sheet_config['headers']]
                        }],
                        'fields': 'userEnteredValue,userEnteredFormat'
                    }
                })
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±–∞—Ç—á–µ–º
            if requests:
                batch_request = {'requests': requests}
                batch_update = await asyncio.to_thread(
                    self.service.spreadsheets().batchUpdate,
                    spreadsheetId=self.spreadsheet_id,
                    body=batch_request
                )
                await asyncio.to_thread(batch_update.execute)
                logger.info("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
    
    async def _share_spreadsheet(self):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É email"""
        if not self.spreadsheet_id:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Drive API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
            drive_service = await asyncio.to_thread(
                build, 'drive', 'v3', credentials=self.service._http.credentials
            )
            
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            permission = {
                'type': 'user',
                'role': 'writer',
                'emailAddress': TARGET_EMAIL
            }
            
            permission_request = await asyncio.to_thread(
                drive_service.permissions().create,
                fileId=self.spreadsheet_id,
                body=permission,
                sendNotificationEmail=True
            )
            
            await asyncio.to_thread(permission_request.execute)
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {TARGET_EMAIL}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    async def sync_leads_data(self, days: int = 30) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤ –∏–∑ ZEP Cloud –≤ Google Sheets"""
        if not self._authenticated or not self.spreadsheet_id:
            logger.error("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZEP Cloud —á–µ—Ä–µ–∑ memory_service
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ ZEP
            leads_data = await self._get_leads_from_zep(days)
            
            if not leads_data:
                logger.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return True
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
            sheet_values = []
            for lead in leads_data:
                row = self._convert_lead_to_row(lead)
                sheet_values.append(row)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
            range_name = f"{SHEET_CONFIGURATIONS['clients']['name']}!A2:AG"
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            clear_request = await asyncio.to_thread(
                self.service.spreadsheets().values().clear,
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            )
            await asyncio.to_thread(clear_request.execute)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if sheet_values:
                body = {
                    'values': sheet_values
                }
                
                update_request = await asyncio.to_thread(
                    self.service.spreadsheets().values().update,
                    spreadsheetId=self.spreadsheet_id,
                    range=range_name,
                    valueInputOption='RAW',
                    body=body
                )
                
                await asyncio.to_thread(update_request.execute)
                logger.info(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(sheet_values)} –ª–∏–¥–æ–≤")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–æ–≤: {e}")
            return False
    
    async def sync_analytics_data(self, days: int = 30) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ZEP Cloud"""
        if not self._authenticated or not self.spreadsheet_id:
            return False
        
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            await self._sync_events_data(days)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–æ—Ä–æ–Ω–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            await self._sync_funnel_data(days)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._sync_daily_stats(days)
            
            logger.info(f"üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {days} –¥–Ω–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    async def _sync_events_data(self, days: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –ª–∏—Å—Ç '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π'"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            recent_events = await self.analytics_service._get_recent_events(hours=days*24)
            
            if not recent_events:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π
            sheet_values = []
            for event in recent_events:
                row = [
                    event.get('session_id', ''),
                    event.get('event_type', ''),
                    str(event.get('event_data', {})),
                    event.get('timestamp', '')
                ]
                sheet_values.append(row)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
            range_name = f"{SHEET_CONFIGURATIONS['events']['name']}!A2:D"
            await self._update_sheet_range(range_name, sheet_values)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _sync_funnel_data(self, days: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏
            funnel_data = await self.analytics_service.get_conversion_funnel(days)
            
            if not funnel_data:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            sheet_values = []
            funnel_stats = funnel_data.get('funnel_data', {})
            conversion_rates = funnel_data.get('conversion_rates', {})
            
            for state, count in funnel_stats.items():
                conversion_rate = conversion_rates.get(state, 0.0)
                row = [
                    state,
                    count,
                    f"{conversion_rate:.2f}%",
                    datetime.now().strftime('%Y-%m-%d')
                ]
                sheet_values.append(row)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
            range_name = f"{SHEET_CONFIGURATIONS['funnel']['name']}!A2:D"
            await self._update_sheet_range(range_name, sheet_values)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
    
    async def _sync_daily_stats(self, days: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            daily_stats = await self.analytics_service.get_daily_stats(days)
            
            if not daily_stats:
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            sheet_values = []
            for day_data in daily_stats:
                event_types = day_data.get('event_types', {})
                new_leads = event_types.get('new_lead', 0)
                hot_leads = event_types.get('qualification_hot', 0)
                escalations = event_types.get('escalation', 0)
                
                row = [
                    day_data.get('date', ''),
                    day_data.get('total_events', 0),
                    day_data.get('unique_sessions', 0),
                    new_leads,
                    hot_leads,
                    escalations
                ]
                sheet_values.append(row)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç
            range_name = f"{SHEET_CONFIGURATIONS['daily_stats']['name']}!A2:F"
            await self._update_sheet_range(range_name, sheet_values)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _update_sheet_range(self, range_name: str, values: List[List]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ª–∏—Å—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            clear_request = await asyncio.to_thread(
                self.service.spreadsheets().values().clear,
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            )
            await asyncio.to_thread(clear_request.execute)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if values:
                body = {'values': values}
                update_request = await asyncio.to_thread(
                    self.service.spreadsheets().values().update,
                    spreadsheetId=self.spreadsheet_id,
                    range=range_name,
                    valueInputOption='RAW',
                    body=body
                )
                await asyncio.to_thread(update_request.execute)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {range_name}: {e}")
    
    async def _get_leads_from_zep(self, days: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤ –∏–∑ ZEP Cloud —á–µ—Ä–µ–∑ MemoryService"""
        try:
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ZEP
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ memory_service –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
            # –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            
            leads = []
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
            sample_lead = {
                'session_id': 'example_session',
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat(),
                'name': '',
                'phone': '',
                'telegram_username': '',
                'whatsapp': '',
                'city': '',
                'in_sochi_now': '',
                'arrival_date': '',
                'local_resident': '',
                'purchase_goal': '',
                'payment_type': '',
                'bank': '',
                'need_to_sell': '',
                'budget_min': '',
                'budget_max': '',
                'locations': '',
                'property_type': '',
                'parameters': '',
                'experience_in_sochi': '',
                'urgency': '',
                'remote_deal': '',
                'online_showing_readiness': '',
                'preferred_slots': '',
                'communication_channel': '',
                'qualification': '',
                'next_action': '',
                'assigned_manager': '',
                'utm_source': '',
                'comments': '',
                'dialog_state': ''
            }
            
            return leads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∏–∑ ZEP: {e}")
            return []
    
    def _convert_lead_to_row(self, lead_data: Dict[str, Any]) -> List[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets"""
        headers = SHEET_CONFIGURATIONS['clients']['headers']
        row = []
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        field_mapping = {
            'ID —Å–µ—Å—Å–∏–∏': 'session_id',
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': 'created_at',
            '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è': 'updated_at',
            '–ò–º—è': 'name',
            '–¢–µ–ª–µ—Ñ–æ–Ω': 'phone',
            'Telegram Username': 'telegram_username',
            'WhatsApp': 'whatsapp',
            '–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞': 'city',
            '–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –°–æ—á–∏ —Å–µ–π—á–∞—Å': 'in_sochi_now',
            '–î–∞—Ç–∞ –ø—Ä–∏–ª—ë—Ç–∞': 'arrival_date',
            '–ú–µ—Å—Ç–Ω—ã–π –∂–∏—Ç–µ–ª—å': 'local_resident',
            '–¶–µ–ª—å –ø–æ–∫—É–ø–∫–∏': 'purchase_goal',
            '–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã': 'payment_type',
            '–ë–∞–Ω–∫': 'bank',
            '–ù—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—ë': 'need_to_sell',
            '–ë—é–¥–∂–µ—Ç –º–∏–Ω': 'budget_min',
            '–ë—é–¥–∂–µ—Ç –º–∞–∫—Å': 'budget_max',
            '–õ–æ–∫–∞—Ü–∏–∏': 'locations',
            '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞': 'property_type',
            '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã': 'parameters',
            '–û–ø—ã—Ç –≤ –°–æ—á–∏': 'experience_in_sochi',
            '–°—Ä–æ—á–Ω–æ—Å—Ç—å': 'urgency',
            '–£–¥–∞–ª—ë–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞': 'remote_deal',
            '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫–∞–∑—É': 'online_showing_readiness',
            '–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã': 'preferred_slots',
            '–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏': 'communication_channel',
            '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è': 'qualification',
            '–°–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ': 'next_action',
            '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä': 'assigned_manager',
            'UTM –∏—Å—Ç–æ—á–Ω–∏–∫': 'utm_source',
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏': 'comments',
            '–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞': 'dialog_state'
        }
        
        for header in headers:
            field_key = field_mapping.get(header, '')
            value = lead_data.get(field_key, '')
            row.append(str(value) if value else '')
        
        return row
    
    async def setup_periodic_sync(self, interval_seconds: int = DEFAULT_SYNC_INTERVAL):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ {interval_seconds} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                await asyncio.sleep(interval_seconds)
                
                if self._authenticated and self.spreadsheet_id:
                    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–∏–¥—ã
                    await self.sync_leads_data()
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                    await self.sync_analytics_data()
                    
                    logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def get_spreadsheet_url(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Å–æ–∑–¥–∞–Ω–Ω–æ–π Google —Ç–∞–±–ª–∏—Ü—ã"""
        if self.spreadsheet_id:
            return f"https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}"
        return None
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        return self._authenticated and self.spreadsheet_id is not None