import json
import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any

import openai
import anthropic
from zep_cloud.client import AsyncZep
from zep_cloud.types import Message

from .config import (
    INSTRUCTION_FILE, OPENAI_API_KEY, OPENAI_MODEL, ZEP_API_KEY, ANTHROPIC_API_KEY, ANTHROPIC_MODEL,
    OPENAI_TEMPERATURE, OPENAI_MAX_TOKENS, OPENAI_PRESENCE_PENALTY, OPENAI_FREQUENCY_PENALTY, OPENAI_TOP_P,
    ANTHROPIC_TEMPERATURE, ANTHROPIC_MAX_TOKENS, GOOGLE_SHEETS_ENABLED, GOOGLE_SHEETS_SYNC_INTERVAL
)
from .memory import MemoryService, DialogState, ClientType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class AlenaAgent:
    """AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ê–ª—ë–Ω–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if OPENAI_API_KEY:
            self.openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
            print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.openai_client = None
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Anthropic –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω
        if ANTHROPIC_API_KEY:
            try:
                self.anthropic_client = anthropic.AsyncAnthropic(api_key=ANTHROPIC_API_KEY)
                print("‚úÖ Anthropic –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Anthropic: {e}")
                self.anthropic_client = None
        else:
            self.anthropic_client = None
            print("‚ö†Ô∏è Anthropic API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω LLM –¥–æ—Å—Ç—É–ø–µ–Ω
        if not self.openai_client and not self.anthropic_client:
            print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω LLM –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        enable_memory = bool(ZEP_API_KEY and ZEP_API_KEY != "test_key")
        self.memory_service = MemoryService(ZEP_API_KEY or "", enable_memory=enable_memory)
        
        if enable_memory:
            print(f"‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            print(f"üß† ZEP API Key: {ZEP_API_KEY[:8]}...{ZEP_API_KEY[-4:]}")
        else:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ ZEP)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Zep –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.zep_client = self.memory_service.zep_client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        self.sheets_service = None
        if GOOGLE_SHEETS_ENABLED and enable_memory:
            try:
                from .integrations.google_sheets_service import GoogleSheetsService
                self.sheets_service = GoogleSheetsService(
                    self.memory_service, 
                    self.memory_service.analytics_service
                )
                print("‚úÖ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
                self.sheets_service = None
        elif GOOGLE_SHEETS_ENABLED:
            print("‚ö†Ô∏è Google Sheets —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ ZEP")
        
        self.instruction = self._load_instruction()
        self.user_sessions = {}  # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
    
    def _load_instruction(self) -> Dict[str, Any]:
        try:
            with open(INSTRUCTION_FILE, 'r', encoding='utf-8') as f:
                instruction = json.load(f)
                logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {INSTRUCTION_FILE}")
                logger.info(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                logger.info(f"üìè –î–ª–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(instruction.get('system_instruction', ''))}")
                print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {INSTRUCTION_FILE}")
                print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return instruction
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {INSTRUCTION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.")
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª {INSTRUCTION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.")
            return {
                "system_instruction": "–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Textil PRO.",
                "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "last_updated": datetime.now().isoformat()
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            return {
                "system_instruction": "–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Textil PRO.",
                "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "last_updated": datetime.now().isoformat()
            }
    
    def reload_instruction(self):
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
        old_updated = self.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        self.instruction = self._load_instruction()
        new_updated = self.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if old_updated != new_updated:
            logger.info(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {old_updated} -> {new_updated}")
            print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {old_updated} -> {new_updated}")
        else:
            logger.info("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
            print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
    
    async def add_to_zep_memory(self, session_id: str, user_message: str, bot_response: str, user_name: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Zep Memory —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.zep_client:
            print(f"‚ö†Ô∏è Zep –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è {session_id}")
            self.add_to_local_session(session_id, user_message, bot_response)
            return False
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –¥–ª—è —Ä–æ–ª–∏
            user_role = user_name if user_name else f"User_{session_id.split('_')[-1][:6]}"
            
            messages = [
                Message(
                    role=user_role,  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ generic "user"
                    role_type="user",
                    content=user_message
                ),
                Message(
                    role="–ê–Ω–∞—Å—Ç–∞—Å–∏—è",  # –ò–º—è –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
                    role_type="assistant",
                    content=bot_response
                )
            ]
            
            await self.zep_client.memory.add(session_id=session_id, messages=messages)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Zep Cloud –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            print(f"   üìù User: {user_message[:50]}...")
            print(f"   ü§ñ Bot: {bot_response[:50]}...")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Zep: {type(e).__name__}: {e}")
            # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å
            self.add_to_local_session(session_id, user_message, bot_response)
            return False
    
    async def get_zep_memory_context(self, session_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep Memory"""
        if not self.zep_client:
            print(f"‚ö†Ô∏è Zep –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {session_id}")
            return self.get_local_session_history(session_id)
            
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            context = memory.context if memory.context else ""
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Zep –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}, –¥–ª–∏–Ω–∞: {len(context)}")
            return context
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Zep: {type(e).__name__}: {e}")
            return self.get_local_session_history(session_id)
    
    async def get_zep_recent_messages(self, session_id: str, limit: int = 6) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Zep Memory"""
        try:
            memory = await self.zep_client.memory.get(session_id=session_id)
            if not memory.messages:
                return ""
            
            recent_messages = memory.messages[-limit:]
            formatted_messages = []
            
            for msg in recent_messages:
                role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.role_type == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                formatted_messages.append(f"{role}: {msg.content}")
            
            return "\n".join(formatted_messages)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Zep: {e}")
            return self.get_local_session_history(session_id)
    
    def add_to_local_session(self, session_id: str, user_message: str, bot_response: str):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π"""
        if session_id not in self.user_sessions:
            self.user_sessions[session_id] = []
        
        self.user_sessions[session_id].append({
            "user": user_message,
            "assistant": bot_response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.user_sessions[session_id]) > 10:
            self.user_sessions[session_id] = self.user_sessions[session_id][-10:]
    
    def get_local_session_history(self, session_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if session_id not in self.user_sessions:
            return ""
        
        history = []
        for exchange in self.user_sessions[session_id][-6:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –æ–±–º–µ–Ω–æ–≤
            history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {exchange['user']}")
            history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {exchange['assistant']}")
        
        return "\n".join(history) if history else ""
    
    async def call_llm(self, messages: list, max_tokens: int = None, temperature: float = None) -> str:
        """–†–æ—É—Ç–µ—Ä LLM –∑–∞–ø—Ä–æ—Å–æ–≤ —Å fallback –º–µ–∂–¥—É OpenAI –∏ Anthropic (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è)"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        max_tokens = max_tokens or OPENAI_MAX_TOKENS
        temperature = temperature or OPENAI_TEMPERATURE
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenAI
        if self.openai_client:
            try:
                logger.info(f"ü§ñ OpenAI –∑–∞–ø—Ä–æ—Å: temp={temperature}, tokens={max_tokens}, presence={OPENAI_PRESENCE_PENALTY}, frequency={OPENAI_FREQUENCY_PENALTY}")
                response = await self.openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=messages,
                    max_tokens=max_tokens,
                    temperature=temperature,
                    presence_penalty=OPENAI_PRESENCE_PENALTY,
                    frequency_penalty=OPENAI_FREQUENCY_PENALTY,
                    top_p=OPENAI_TOP_P
                )
                result = response.choices[0].message.content
                logger.info("‚úÖ OpenAI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
                print(f"‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback –Ω–∞ Anthropic
        if self.anthropic_client:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Anthropic –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                anthropic_max_tokens = max_tokens or ANTHROPIC_MAX_TOKENS
                anthropic_temperature = temperature or ANTHROPIC_TEMPERATURE
                
                logger.info(f"ü§ñ Fallback –Ω–∞ Anthropic: temp={anthropic_temperature}, tokens={anthropic_max_tokens}")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Anthropic API
                system_message = ""
                user_messages = []
                
                for msg in messages:
                    if msg["role"] == "system":
                        system_message = msg["content"]
                    else:
                        user_messages.append(msg)
                
                response = await self.anthropic_client.messages.create(
                    model=ANTHROPIC_MODEL,
                    max_tokens=anthropic_max_tokens,
                    temperature=anthropic_temperature,
                    system=system_message,
                    messages=user_messages
                )
                
                result = response.content[0].text
                logger.info("‚úÖ Anthropic –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                return result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Anthropic: {e}")
                print(f"‚ùå Anthropic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ï—Å–ª–∏ –æ–±–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É
        logger.warning("‚ùå –í—Å–µ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É")
        return self._fallback_response(messages[-1]["content"] if messages else "")
    
    def _fallback_response(self, user_message: str) -> str:
        """Fallback –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É"""
        raise Exception("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    async def generate_response(self, user_message: str, session_id: str, user_name: str = None) -> str:
        try:
            # üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø
            memory_result = await self.memory_service.process_message(
                user_id=session_id, 
                message_text=user_message
            )
            
            if not memory_result.get('success', False):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {memory_result.get('error')}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            lead_data = memory_result.get('lead_data')
            current_state = memory_result.get('current_state', DialogState.S0_GREETING)
            qualification_status = memory_result.get('qualification_status', ClientType.COLD)
            recommendations = memory_result.get('recommendations', {})
            should_escalate = memory_result.get('should_escalate', False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            system_prompt = self._build_contextual_system_prompt(
                lead_data, current_state, qualification_status, recommendations
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            dialog_history = await self.memory_service.get_dialog_history(session_id, limit=5)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = self._build_llm_messages(
                system_prompt, user_message, dialog_history, recommendations
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
            if self.openai_client or self.anthropic_client:
                try:
                    bot_response = await self.call_llm(messages)
                except Exception as llm_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM —Ä–æ—É—Ç–µ—Ä–∞: {llm_error}")
                    bot_response = self._fallback_response_with_context(
                        user_message, current_state, recommendations
                    )
            else:
                bot_response = self._fallback_response_with_context(
                    user_message, current_state, recommendations
                )
            
            # üö® –ü–†–û–í–ï–†–ö–ê –ù–ê –≠–°–ö–ê–õ–ê–¶–ò–Æ
            if should_escalate:
                escalation_note = self._generate_escalation_summary(lead_data)
                logger.info(f"üî• –≠–°–ö–ê–õ–ê–¶–ò–Ø –¥–ª—è {session_id}: {escalation_note}")
                print(f"üî• –ì–û–†–Ø–ß–ò–ô –õ–ò–î: {session_id} - {escalation_note}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
            await self.memory_service.process_message(
                user_id=session_id,
                message_text=bot_response,
                message_type="assistant"
            )
            
            # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
            await self.add_to_zep_memory(session_id, user_message, bot_response, user_name)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –ø—Ä–∏ –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
            if self.sheets_service and lead_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
                    significant_changes = (
                        should_escalate or 
                        qualification_status in [ClientType.WARM, ClientType.HOT] or
                        current_state in [DialogState.S3_PAYMENT, DialogState.S5_BUDGET, DialogState.S8_ACTION]
                    )
                    
                    if significant_changes:
                        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                        asyncio.create_task(self._sync_to_sheets_async(session_id))
                        logger.debug(f"üìä –ó–∞–ø—É—â–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –¥–ª—è {session_id}")
                        
                except Exception as sheets_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets: {sheets_error}")
            
            return bot_response
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {session_id}: {e}")
            return self._emergency_fallback_response(user_message)
    
    def _build_contextual_system_prompt(self, lead_data, current_state: DialogState, 
                                      qualification_status: ClientType, 
                                      recommendations: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        base_prompt = self.instruction.get("system_instruction", "")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –∫–ª–∏–µ–Ω—Ç–µ
        context_parts = []
        
        if lead_data:
            client_info = []
            if lead_data.name:
                client_info.append(f"–ò–º—è: {lead_data.name}")
            if lead_data.business_sphere:
                client_info.append(f"–°—Ñ–µ—Ä–∞: {lead_data.business_sphere}")
            if lead_data.automation_goal:
                client_info.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
            if lead_data.budget_min or lead_data.budget_max:
                budget = f"–ë—é–¥–∂–µ—Ç: ${lead_data.budget_min or 0}-{lead_data.budget_max or '‚àû'}"
                client_info.append(budget)
            
            if client_info:
                context_parts.append(f"–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: {' | '.join(client_info)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –°–æ—á–∏)
        state_descriptions = {
            DialogState.S0_GREETING: "–ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ - –≤—ã—è—Å–Ω–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏",
            DialogState.S1_BUSINESS: "–£–∑–Ω–∞–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≥–æ—Ä–æ–¥", 
            DialogState.S2_GOAL: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            DialogState.S3_PAYMENT: "–û–±—Å—É–¥–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã –∏ –±—é–¥–∂–µ—Ç",
            DialogState.S4_REQUIREMENTS: "–í—ã—è—Å–Ω–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—ä–µ–∫—Ç—É",
            DialogState.S5_BUDGET: "–£—Ç–æ—á–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã",
            DialogState.S6_URGENCY: "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏",
            DialogState.S7_EXPERIENCE: "–£–∑–Ω–∞–π—Ç–µ –æ–ø—ã—Ç –ø–æ–∫—É–ø–∫–∏ –≤ –°–æ—á–∏",
            DialogState.S8_ACTION: "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫–∞–∑ –∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É"
        }
        
        state_desc = state_descriptions.get(current_state, "")
        context_parts.append(f"–≠–¢–ê–ü –î–ò–ê–õ–û–ì–ê: {current_state.value} - {state_desc}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        status_descriptions = {
            ClientType.COLD: "–•–û–õ–û–î–ù–´–ô - –Ω—É–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö",
            ClientType.WARM: "–¢–Å–ü–õ–´–ô - –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥", 
            ClientType.HOT: "–ì–û–†–Ø–ß–ò–ô - –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫–∞–∑!"
        }
        
        status_desc = status_descriptions.get(qualification_status, "")
        context_parts.append(f"–°–¢–ê–¢–£–° –ö–õ–ò–ï–ù–¢–ê: {status_desc}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendations.get('next_questions'):
            questions = recommendations['next_questions'][:2]  # –ú–∞–∫—Å–∏–º—É–º 2 –≤–æ–ø—Ä–æ—Å–∞
            context_parts.append(f"–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –í–û–ü–†–û–°–´: {' | '.join(questions)}")
        
        if recommendations.get('demo_ready'):
            context_parts.append("üéØ –ì–û–¢–û–í –ö –ü–û–ö–ê–ó–£: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–æ–∫–∞–∑–∞!")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        if context_parts:
            base_prompt += f"\n\n{'='*50}\n" + "\n".join(context_parts) + f"\n{'='*50}"
        
        return base_prompt
    
    def _build_llm_messages(self, system_prompt: str, user_message: str, 
                           dialog_history: list, recommendations: Dict[str, Any]) -> list:
        """–°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        messages = [{"role": "system", "content": system_prompt}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if dialog_history:
            history_text = "–ù–ï–î–ê–í–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:\n"
            for msg in dialog_history[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                role = "üë§ –ö–ª–∏–µ–Ω—Ç" if msg['role'] == 'user' else "ü§ñ –ê–ª—ë–Ω–∞"
                content = msg['content'][:200] if len(msg['content']) > 200 else msg['content']
                history_text += f"{role}: {content}\n"
            
            messages.append({"role": "system", "content": history_text})
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        return messages
    
    def _fallback_response_with_context(self, user_message: str, current_state: DialogState, 
                                      recommendations: Dict[str, Any]) -> str:
        """Fallback –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É"""
        raise Exception("LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    def _emergency_fallback_response(self, user_message: str) -> str:
        """–ê–≤–∞—Ä–∏–π–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ—Ç–∫–∞–∑–µ —Å–∏—Å—Ç–µ–º - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É"""
        raise Exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∞–≤–∞—Ä–∏–π–Ω—ã–µ fallback –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    def _generate_escalation_summary(self, lead_data) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏"""
        if not lead_data:
            return "–ì–æ—Ä—è—á–∏–π –ª–∏–¥ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"
        
        summary_parts = []
        
        if lead_data.name:
            summary_parts.append(f"–ò–º—è: {lead_data.name}")
        if lead_data.phone:
            summary_parts.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {lead_data.phone}")
        if lead_data.business_sphere:
            summary_parts.append(f"–°—Ñ–µ—Ä–∞: {lead_data.business_sphere}")
        if lead_data.budget_max:
            summary_parts.append(f"–ë—é–¥–∂–µ—Ç: –¥–æ ${lead_data.budget_max}")
        if lead_data.automation_goal:
            summary_parts.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
        
        return " | ".join(summary_parts) if summary_parts else "–ì–æ—Ä—è—á–∏–π –ª–∏–¥ - —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    
    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
    async def get_lead_analytics(self, session_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ª–∏–¥—É"""
        return await self.memory_service.get_analytics_summary(session_id)
    
    async def get_memory_insights(self, session_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        try:
            lead_data = await self.memory_service.get_lead_data(session_id)
            dialog_history = await self.memory_service.get_dialog_history(session_id, limit=20)
            
            return {
                'lead_data': lead_data.to_dict() if lead_data else {},
                'dialog_history': dialog_history,
                'current_state': lead_data.current_dialog_state.value if lead_data else 's0_greeting',
                'qualification_status': lead_data.qualification_status.value if lead_data and lead_data.qualification_status else 'cold',
                'should_escalate': self.memory_service._should_escalate(lead_data) if lead_data else False
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è {session_id}: {e}")
            return {}
    
    async def process_reminder_due(self, session_id: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            due_reminders = await self.memory_service.reminders.get_due_reminders()
            session_reminders = [r for r in due_reminders if r.session_id == session_id]
            
            if session_reminders:
                reminder = session_reminders[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                lead_data = await self.memory_service.get_lead_data(session_id)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                message = await self.memory_service.reminders.generate_reminder_message(
                    reminder, lead_data.to_dict() if lead_data else None
                )
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                await self.memory_service.reminders.mark_reminder_completed(reminder)
                
                return message
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {session_id}: {e}")
            return None
    
    async def ensure_user_exists(self, user_id: str, user_data: Dict[str, Any] = None):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç"""
        if not self.zep_client:
            return False
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = await self.zep_client.user.get(user_id=user_id)
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Zep")
                return True
            except:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_data or {}
            await self.zep_client.user.add(
                user_id=user_id,
                first_name=user_info.get('first_name', 'User'),
                last_name=user_info.get('last_name', ''),
                email=user_info.get('email', f'{user_id}@telegram.user'),
                metadata={
                    'source': 'telegram',
                    'created_at': datetime.now().isoformat()
                }
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Zep: {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Zep: {e}")
            return False
    
    async def ensure_session_exists(self, session_id: str, user_id: str):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤ Zep –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç"""
        if not self.zep_client:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            await self.zep_client.memory.add_session(
                session_id=session_id,
                user_id=user_id,
                metadata={
                    'channel': 'telegram',
                    'created_at': datetime.now().isoformat()
                }
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –≤ Zep: {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            # –°–µ—Å—Å–∏—è –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            print(f"‚ÑπÔ∏è –°–µ—Å—Å–∏—è {session_id} –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return True
    
    async def _sync_to_sheets_async(self, session_id: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        if not self.sheets_service:
            return
            
        try:
            logger.debug(f"üìä –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Google Sheets –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.sheets_service._authenticated:
                auth_success = await self.sheets_service.authenticate()
                if not auth_success:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Google Sheets")
                    return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            if not self.sheets_service.spreadsheet_id:
                spreadsheet_id = await self.sheets_service.create_spreadsheet()
                if not spreadsheet_id:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É")
                    return
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è Google —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_id}")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
            leads_success = await self.sheets_service.sync_leads_data(days=30)
            if leads_success:
                logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {session_id}")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_success = await self.sheets_service.sync_analytics_data(days=30)
            if analytics_success:
                logger.debug(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {session_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def setup_google_sheets_periodic_sync(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Google Sheets"""
        if not self.sheets_service or not GOOGLE_SHEETS_ENABLED:
            return
            
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets")
            await self.sheets_service.setup_periodic_sync(GOOGLE_SHEETS_SYNC_INTERVAL)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    
    async def get_sheets_url(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL Google —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞"""
        if self.sheets_service:
            return await self.sheets_service.get_spreadsheet_url()
        return None
    
    async def manual_sheets_sync(self) -> bool:
        """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        if not self.sheets_service:
            logger.warning("‚ö†Ô∏è Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            if not self.sheets_service._authenticated:
                auth_success = await self.sheets_service.authenticate()
                if not auth_success:
                    return False
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.sheets_service.spreadsheet_id:
                spreadsheet_id = await self.sheets_service.create_spreadsheet()
                if not spreadsheet_id:
                    return False
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            leads_success = await self.sheets_service.sync_leads_data(days=30)
            analytics_success = await self.sheets_service.sync_analytics_data(days=30)
            
            if leads_success and analytics_success:
                logger.info("‚úÖ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning("‚ö†Ô∏è –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
            return False

    def get_welcome_message(self) -> str:
        return self.instruction.get("welcome_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")


agent = AlenaAgent()