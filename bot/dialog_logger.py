"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
"""
import json
import os
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path
import asyncio
import threading
from collections import deque

logger = logging.getLogger(__name__)


class DialogLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    def __init__(self, log_dir: str = "logs/dialogs"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤

        Args:
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
        """
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)

        # –ë—É—Ñ–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        self.message_buffer = deque(maxlen=100)
        self.buffer_lock = threading.Lock()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.recent_dialogs: Dict[str, List[Dict]] = {}
        self.max_recent_per_user = 50

        logger.info(f"‚úÖ DialogLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –õ–æ–≥–∏ –≤: {self.log_dir.absolute()}")

    def log_message(
        self,
        session_id: str,
        user_id: str,
        user_name: str,
        message_type: str,  # "user" –∏–ª–∏ "assistant"
        text: str,
        state: Optional[str] = None,
        qualification: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ

        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (user/assistant)
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            qualification: –°—Ç–∞—Ç—É—Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        timestamp = datetime.now().isoformat()

        log_entry = {
            "timestamp": timestamp,
            "session_id": session_id,
            "user_id": user_id,
            "user_name": user_name,
            "message_type": message_type,
            "text": text,
            "state": state,
            "qualification": qualification,
            "metadata": metadata or {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.message_buffer.append(log_entry)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ recent_dialogs
        if user_id not in self.recent_dialogs:
            self.recent_dialogs[user_id] = []

        self.recent_dialogs[user_id].append(log_entry)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
        if len(self.recent_dialogs[user_id]) > self.max_recent_per_user:
            self.recent_dialogs[user_id] = self.recent_dialogs[user_id][-self.max_recent_per_user:]

        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        if len(self.message_buffer) >= 10:
            self.flush_buffer()

    def log_state_transition(
        self,
        session_id: str,
        user_id: str,
        from_state: str,
        to_state: str,
        trigger_message: Optional[str] = None
    ) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from_state: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            to_state: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            trigger_message: –°–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–∑–≤–∞–≤—à–µ–µ –ø–µ—Ä–µ—Ö–æ–¥
        """
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "session_id": session_id,
            "user_id": user_id,
            "transition": {
                "from": from_state,
                "to": to_state,
                "trigger": trigger_message
            }
        }

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        with self.buffer_lock:
            self.message_buffer.append(log_entry)

        logger.info(f"üìä –ü–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {from_state} -> {to_state} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

    def flush_buffer(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        if not self.message_buffer:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        today = datetime.now().strftime("%Y-%m-%d")
        log_file = self.log_dir / f"dialogs_{today}.jsonl"

        with self.buffer_lock:
            messages_to_write = list(self.message_buffer)
            self.message_buffer.clear()

        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ JSONL —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON)
            with open(log_file, "a", encoding="utf-8") as f:
                for message in messages_to_write:
                    f.write(json.dumps(message, ensure_ascii=False) + "\n")

            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages_to_write)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {log_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

    def get_user_dialog(self, user_id: str, limit: int = 20) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞–º—è—Ç–∏

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if user_id not in self.recent_dialogs:
            return []

        return self.recent_dialogs[user_id][-limit:]

    def log_zep_data(
        self,
        session_id: str,
        user_id: str,
        operation: str,  # 'save' –∏–ª–∏ 'load'
        zep_data: Dict
    ) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ ZEP

        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (save/load)
            zep_data: –î–∞–Ω–Ω—ã–µ ZEP
        """
        timestamp = datetime.now().isoformat()

        log_entry = {
            "timestamp": timestamp,
            "session_id": session_id,
            "user_id": user_id,
            "message_type": f"zep_{operation}",
            "operation": operation,
            "zep_data": zep_data,
            "metadata": {
                "data_fields": list(zep_data.keys()) if zep_data else [],
                "data_size": len(str(zep_data)) if zep_data else 0
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.message_buffer.append(log_entry)

        # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø–æ–ª–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        if len(self.message_buffer) >= 10:
            self.flush_buffer()

        logger.info(f"üìä ZEP {operation.upper()}: {session_id} - {len(zep_data) if zep_data else 0} –ø–æ–ª–µ–π")

    def get_all_recent_dialogs(self, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏

        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        all_messages = []

        for user_id, messages in self.recent_dialogs.items():
            all_messages.extend(messages)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        all_messages.sort(key=lambda x: x.get("timestamp", ""), reverse=True)

        return all_messages[:limit]

    def get_dialog_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ª–æ–≥–∞–º

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_users = len(self.recent_dialogs)
        total_messages = sum(len(msgs) for msgs in self.recent_dialogs.values())

        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        state_counts = {}
        qualification_counts = {}

        for messages in self.recent_dialogs.values():
            for msg in messages:
                if msg.get("state"):
                    state_counts[msg["state"]] = state_counts.get(msg["state"], 0) + 1
                if msg.get("qualification"):
                    qualification_counts[msg["qualification"]] = qualification_counts.get(msg["qualification"], 0) + 1

        return {
            "total_users": total_users,
            "total_messages": total_messages,
            "states": state_counts,
            "qualifications": qualification_counts,
            "buffer_size": len(self.message_buffer)
        }

    def search_dialogs(self, query: str, user_id: Optional[str] = None) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            user_id: –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        results = []
        query_lower = query.lower()

        if user_id and user_id in self.recent_dialogs:
            messages_to_search = self.recent_dialogs[user_id]
        else:
            messages_to_search = []
            for msgs in self.recent_dialogs.values():
                messages_to_search.extend(msgs)

        for msg in messages_to_search:
            if query_lower in msg.get("text", "").lower():
                results.append(msg)

        return results[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

    def export_user_dialog(self, user_id: str, format: str = "json") -> Optional[str]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, txt)

        Returns:
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        if user_id not in self.recent_dialogs:
            return None

        messages = self.recent_dialogs[user_id]

        if format == "json":
            return json.dumps(messages, ensure_ascii=False, indent=2)

        elif format == "txt":
            lines = []
            for msg in messages:
                timestamp = msg.get("timestamp", "")
                msg_type = msg.get("message_type", "")
                text = msg.get("text", "")
                state = msg.get("state", "")

                prefix = "üë§ USER" if msg_type == "user" else "ü§ñ BOT"
                lines.append(f"[{timestamp}] {prefix}: {text}")
                if state:
                    lines.append(f"  üìç –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

            return "\n".join(lines)

        return None

    def cleanup_old_logs(self, days_to_keep: int = 7) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥-—Ñ–∞–π–ª—ã

        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        cutoff_date = datetime.now().timestamp() - (days_to_keep * 86400)

        for log_file in self.log_dir.glob("dialogs_*.jsonl"):
            if log_file.stat().st_mtime < cutoff_date:
                try:
                    log_file.unlink()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª: {log_file.name}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ {log_file.name}: {e}")

    def __del__(self):
        """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            self.flush_buffer()
        except:
            pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_logger = DialogLogger()