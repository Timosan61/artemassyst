"""
ü§ñ artemmyassyst Bot Webhook Server

Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –≤ –°–æ—á–∏.
AI-–∞–≥–µ–Ω—Ç "–ê–ª—ë–Ω–∞" —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- AI-powered –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ OpenAI/Anthropic
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ ZEP
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
"""

import os
import sys
import logging
import asyncio
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
import telebot
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ artemmyassyst Bot Webhook Server...")

# –ò–º–ø–æ—Ä—Ç structured logging
try:
    from utils.structured_logger import (
        log_webhook_received, log_ai_response, log_voice_message,
        log_error, log_business_connection
    )
    STRUCTURED_LOGGING = True
    print("‚úÖ Structured logging –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    STRUCTURED_LOGGING = False
    print("‚ö†Ô∏è Structured logging –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç AI agent
try:
    from bot.agent import AlenaAgent
    agent = AlenaAgent()
    AI_ENABLED = True
    print("‚úÖ AI Agent –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    agent = None
    AI_ENABLED = False
    print(f"‚ö†Ô∏è AI Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TELEGRAM_BOT_TOKEN[:20]}...")

# === –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_sessions = {}  # {user_id: session_id}

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
os.makedirs("logs", exist_ok=True)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –§–∞–π–ª–æ–≤—ã–π handler
file_handler = logging.FileHandler("logs/bot.log", encoding='utf-8')
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(
    title="artemmyassyst Bot Webhook",
    description="Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –≤ –°–æ—á–∏",
    version="2.0"
)

# === –°–ß–ï–¢–ß–ò–ö–ò ===
update_counter = 0
last_updates = []

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def send_human_like_response(chat_id: int, text: str, user_name: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    try:
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        typing_delay = min(len(text) * 0.02, 3.0)  # –ú–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã

        bot.send_chat_action(chat_id, 'typing')
        await asyncio.sleep(typing_delay)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, text, parse_mode='Markdown')

        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name or chat_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ Markdown
        try:
            bot.send_message(chat_id, text)
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")

def extract_user_info(message_data):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user = message_data.get('from', {})
        user_id = user.get('id')
        first_name = user.get('first_name', '–ê–Ω–æ–Ω–∏–º')
        last_name = user.get('last_name', '')
        username = user.get('username', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        user_name = first_name
        if last_name:
            user_name += f" {last_name}"

        return user_id, user_name, username
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None, "–ê–Ω–æ–Ω–∏–º", ""

# === WEBHOOK ENDPOINTS ===

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ"""
    return {
        "service": "artemmyassyst Bot Webhook",
        "status": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
        "bot_name": "@artemmyassyst_bot",
        "ai_enabled": AI_ENABLED,
        "updates_processed": update_counter,
        "uptime": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        health_status = {
            "status": "healthy",
            "ai_enabled": AI_ENABLED,
            "bot_token_configured": bool(TELEGRAM_BOT_TOKEN),
            "webhook_secret_configured": bool(WEBHOOK_SECRET_TOKEN),
            "updates_processed": update_counter,
            "timestamp": datetime.now().isoformat()
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI agent
        if AI_ENABLED and agent:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                health_status["ai_status"] = "operational"
                health_status["zep_enabled"] = bool(agent.zep_client)
                health_status["memory_enabled"] = bool(agent.memory_service.enable_memory)
            except Exception as e:
                health_status["ai_status"] = f"error: {str(e)}"
                health_status["ai_enabled"] = False

        return health_status

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/webhook")
async def webhook(request: Request):
    """–û—Å–Ω–æ–≤–Ω–æ–π webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global update_counter, last_updates

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º secret token
        if WEBHOOK_SECRET_TOKEN:
            token_header = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
            if token_header != WEBHOOK_SECRET_TOKEN:
                logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π secret token: {token_header}")
                raise HTTPException(status_code=403, detail="Forbidden")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await request.json()
        update_counter += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_updates.append({
            "timestamp": datetime.now().isoformat(),
            "update_id": data.get('update_id'),
            "type": "message" if 'message' in data else "business_message" if 'business_message' in data else "unknown"
        })
        if len(last_updates) > 10:
            last_updates.pop(0)

        # Structured logging
        if STRUCTURED_LOGGING:
            try:
                log_webhook_received(
                    update_id=data.get('update_id', 0),
                    message_type="message" if 'message' in data else "business_message",
                    has_ai=AI_ENABLED
                )
            except Exception:
                pass

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'message' in data:
            await process_regular_message(data['message'])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Business API —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif 'business_message' in data:
            await process_business_message(data['business_message'])

        else:
            logger.info(f"‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø update: {list(data.keys())}")

        return {"ok": True}

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        if STRUCTURED_LOGGING:
            try:
                log_error(
                    error_type="webhook_critical_error",
                    error_message=str(e),
                    user_id="unknown",
                    user_name="unknown"
                )
            except Exception:
                pass
        return {"ok": False, "error": str(e)}

async def process_regular_message(message_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        chat_id = message_data.get('chat', {}).get('id')
        message_id = message_data.get('message_id')
        text = message_data.get('text', '')
        message_type = "text"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'voice' in message_data:
            message_type = "voice"
        elif 'document' in message_data:
            message_type = "document"
        elif 'photo' in message_data:
            message_type = "photo"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id, user_name, username = extract_user_info(message_data)

        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text[:100] if text else message_type}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
        if AI_ENABLED and agent and text:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º session_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_key = str(user_id)
                session_id = user_sessions.get(user_key, user_key)

                response, real_session_id = await agent.generate_response(
                    text,
                    session_id,
                    user_name,
                    chat_id=str(chat_id),
                    existing_session_id=session_id if user_key in user_sessions else None
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô session_id –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                user_sessions[user_key] = real_session_id

                # Structured logging
                if STRUCTURED_LOGGING:
                    try:
                        log_ai_response(
                            user_id=str(user_id),
                            user_name=user_name,
                            input_text=text,
                            response_text=response,
                            ai_enabled=True,
                            response_time=1.0,  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                            session_id=session_id
                        )
                    except Exception:
                        pass

            except Exception as ai_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ai_error}")

                if STRUCTURED_LOGGING:
                    try:
                        log_error(
                            error_type="ai_generation_error",
                            error_message=str(ai_error),
                            user_id=str(user_id),
                            user_name=user_name,
                            input_text=text
                        )
                    except Exception:
                        pass

                response = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –Ø –ê–ª—ë–Ω–∞, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–æ—á–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

        elif text:
            # Fallback –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            response = f"üëã {user_name}, –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç. –ú–∏–Ω—É—Ç–æ—á–∫—É!\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞—é –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."

        elif message_type == "voice":
            response = f"üé§ {user_name}, –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."

            if STRUCTURED_LOGGING:
                try:
                    log_voice_message(
                        user_id=str(user_id),
                        user_name=user_name,
                        processed=False,
                        error="Voice processing not available"
                    )
                except Exception:
                    pass
        else:
            logger.info(f"‚ÑπÔ∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è '{message_type}' –æ—Ç {user_name}")
            return {"ok": True, "action": "no_action"}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await send_human_like_response(chat_id, response, user_name=user_name)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def process_business_message(business_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Business API —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        chat_id = business_data.get('chat', {}).get('id')
        text = business_data.get('text', '')

        user_id, user_name, username = extract_user_info(business_data)

        logger.info(f"üíº Business —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text[:100]}")

        if STRUCTURED_LOGGING:
            try:
                log_business_connection(
                    user_id=str(user_id),
                    user_name=user_name,
                    message_preview=text[:100],
                    connection_type="business_api"
                )
            except Exception:
                pass

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await process_regular_message(business_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Business —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.post("/set-webhook")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    try:
        webhook_url = "https://artemassyst-bot-tt5dt.ondigitalocean.app/webhook"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
        webhook_data = {
            "url": webhook_url,
            "secret_token": WEBHOOK_SECRET_TOKEN,
            "allowed_updates": ["message", "business_message"]
        }

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        response = bot.set_webhook(**webhook_data)

        if response:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token_set": bool(WEBHOOK_SECRET_TOKEN),
                "allowed_updates": "‚úÖ Business API –≤–∫–ª—é—á–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED"}

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

# === ADMIN ENDPOINTS ===

@app.get("/admin/dialogs/stats")
async def get_dialog_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–∞–ª–æ–≥–∞–º"""
    try:
        from bot.dialog_logger import dialog_logger
        stats = dialog_logger.get_dialog_stats()
        return {
            "status": "success",
            "data": stats
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/admin/dialogs/user/{user_id}")
async def get_user_dialog(user_id: str, limit: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from bot.dialog_logger import dialog_logger
        messages = dialog_logger.get_user_dialog(user_id, limit)
        return {
            "status": "success",
            "user_id": user_id,
            "messages_count": len(messages),
            "data": messages
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/admin/dialogs/recent")
async def get_recent_dialogs(limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from bot.dialog_logger import dialog_logger
        messages = dialog_logger.get_all_recent_dialogs(limit)
        return {
            "status": "success",
            "messages_count": len(messages),
            "data": messages
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/admin/dialogs/search")
async def search_dialogs(query: str, user_id: str = None, limit: int = 50):
    """–ü–æ–∏—Å–∫ –ø–æ –¥–∏–∞–ª–æ–≥–∞–º"""
    try:
        from bot.dialog_logger import dialog_logger
        results = dialog_logger.search_dialogs(query, user_id)
        return {
            "status": "success",
            "query": query,
            "user_id": user_id,
            "results_count": len(results),
            "data": results[:limit]
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/admin/dialogs/export/{user_id}")
async def export_user_dialog(user_id: str, format: str = "json"):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from bot.dialog_logger import dialog_logger
        from fastapi.responses import PlainTextResponse

        exported_data = dialog_logger.export_user_dialog(user_id, format)
        if not exported_data:
            return {"error": "–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        if format == "txt":
            return PlainTextResponse(exported_data,
                                   media_type="text/plain; charset=utf-8")
        else:
            return PlainTextResponse(exported_data,
                                   media_type="application/json; charset=utf-8")
    except Exception as e:
        return {"error": str(e)}

@app.post("/admin/reload-prompt")
async def reload_prompt():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        if AI_ENABLED and agent is not None:
            old_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            agent.reload_instruction()
            new_updated = agent.instruction.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            return {
                "status": "success",
                "changed": old_updated != new_updated,
                "old_updated": old_updated,
                "new_updated": new_updated,
                "instruction_length": len(agent.instruction.get("system_instruction", ""))
            }
        else:
            return {"error": "AI agent –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}
    except Exception as e:
        return {"error": str(e)}

@app.post("/admin/sheets/sync")
async def sync_google_sheets():
    """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    try:
        if AI_ENABLED and agent is not None:
            sync_success = await agent.manual_sheets_sync()
            sheets_url = await agent.get_sheets_url()

            return {
                "status": "success" if sync_success else "partial",
                "sync_completed": sync_success,
                "sheets_url": sheets_url,
                "sheets_enabled": hasattr(agent, 'sheets_service') and agent.sheets_service is not None
            }
        else:
            return {"error": "AI agent –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    import uvicorn

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    logger.info("üöÄ artemmyassyst Webhook server started")
    logger.info(f"üìÅ Logs directory: {os.path.abspath('logs')}")
    logger.info(f"ü§ñ Bot token: {TELEGRAM_BOT_TOKEN[:20]}...")
    logger.info(f"üîÑ AI Agent enabled: {AI_ENABLED}")

    if WEBHOOK_SECRET_TOKEN:
        logger.info(f"üîê Webhook secret configured")
    else:
        logger.warning("‚ö†Ô∏è Webhook secret not configured")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)