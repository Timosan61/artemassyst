#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
"""
import asyncio
import os
import uuid
import time
from datetime import datetime
from dotenv import load_dotenv
from bot.memory.memory_service import MemoryService
from bot.memory.session_manager import session_manager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_realistic_conversation():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–æ–≤"""

    # –ü–æ–ª—É—á–∞–µ–º ZEP API –∫–ª—é—á
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API Key: {zep_api_key[:8]}...{zep_api_key[-4:]}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    memory_service = MemoryService(zep_api_key, enable_memory=True)
    print("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = f"user_{uuid.uuid4().hex[:8]}"
    test_chat_id = f"chat_{uuid.uuid4().hex[:8]}"
    print(f"üÜî –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_id}")
    print(f"üí¨ –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {test_chat_id}")

    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–ª–æ–≥–∞
    conversation_scenario = [
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        {"text": "–ü—Ä–∏–≤–µ—Ç!", "role": "user", "expect_questions": True},
        {"text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—â–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∏ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
        {"text": "–î–ª—è —Å–µ–±—è, —Ö–æ—á—É –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –°–æ—á–∏", "role": "user", "expect_questions": True},
        {"text": "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –ü–ú–ñ –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –ö–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
        {"text": "–î–æ–º, 2-3 —ç—Ç–∞–∂–∞, –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ", "role": "user", "expect_questions": True},
        {"text": "–ü–æ–Ω—è–ª, –¥–æ–º –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ. –ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç –±—é–¥–∂–µ—Ç
        {"text": "–î–æ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π", "role": "user", "expect_questions": True},
        {"text": "–û—Ç–ª–∏—á–Ω–æ! –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É –ø–æ–∑–∂–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤)
        {"text": "–ü—Ä–∏–≤–µ—Ç, —Ç—ã –º–µ–Ω—è –ø–æ–º–Ω–∏—à—å?", "role": "user", "expect_questions": False},  # –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤
        {"text": "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–Ω—é! –ú—ã —Å –≤–∞–º–∏ –æ–±—Å—É–∂–¥–∞–ª–∏ –¥–æ–º –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ –¥–æ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤. –ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–µ—Ö–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞)
        {"text": "–ê –∫–∞–∫–æ–π —É –Ω–∞—Å –±—ã–ª –±—é–¥–∂–µ—Ç?", "role": "user", "expect_questions": False},
        {"text": "–ú—ã —Å –≤–∞–º–∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –±—é–¥–∂–µ—Ç –¥–æ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π. –í—Å–µ –≤–µ—Ä–Ω–æ?", "role": "assistant", "expect_questions": False},

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏
        {"text": "–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ. –ê –≥–¥–µ –∏–º–µ–Ω–Ω–æ –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ?", "role": "user", "expect_questions": True},
        {"text": "–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –≠—Å—Ç–æ-–°–∞–¥–æ–∫–µ –∏ –Ω–∞ –†–æ–∑–µ –•—É—Ç–æ—Ä. –ö–∞–∫–∞—è –ª–æ–∫–∞—Ü–∏—è –≤–∞–º –±–ª–∏–∂–µ?", "role": "assistant", "expect_questions": False},
    ]

    print(f"\nüìù –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞...")
    print("=" * 70)

    session_id = None
    duplicate_questions_found = 0
    total_questions_asked = 0

    for i, message_data in enumerate(conversation_scenario):
        print(f"\n--- –≠—Ç–∞–ø {i+1}: {message_data['role']} ---")
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_data['text']}'")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            if session_id is None:
                session_id = session_manager.generate_session_id(test_user_id, test_chat_id)
                print(f"üÜî –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await memory_service.process_message(
                user_id=test_user_id,
                message_text=message_data['text'],
                message_type=message_data['role'],
                chat_id=test_chat_id,
                existing_session_id=session_id
            )

            if result.get('success'):
                lead_data = result.get('lead_data')
                current_state = result.get('current_state')
                recommendations = result.get('recommendations', {})

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                next_questions = recommendations.get('next_questions', [])
                if next_questions:
                    print(f"   ‚ùì –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
                    for j, question in enumerate(next_questions):
                        print(f"      {j+1}. {question}")
                        total_questions_asked += 1

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã
                        if lead_data and question in lead_data.asked_questions[:-1]:  # –ö—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                            duplicate_questions_found += 1
                            print(f"      ‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–í–¢–û–†: '{question}' —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ!")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
                if message_data['expect_questions'] and not next_questions:
                    print(f"   ‚ö†Ô∏è –û–ñ–ò–î–ê–õ–ò–°–¨ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –∏—Ö –Ω–µ—Ç!")
                elif not message_data['expect_questions'] and next_questions:
                    print(f"   ‚ö†Ô∏è –ù–ï –û–ñ–ò–î–ê–õ–ò–°–¨ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –æ–Ω–∏ –µ—Å—Ç—å!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if lead_data:
                    data_parts = []
                    if lead_data.automation_goal:
                        data_parts.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
                    if lead_data.budget_max:
                        data_parts.append(f"–ë—é–¥–∂–µ—Ç: –¥–æ {lead_data.budget_max}")
                    if lead_data.property_type:
                        data_parts.append(f"–¢–∏–ø: {lead_data.property_type}")
                    if lead_data.preferred_locations:
                        data_parts.append(f"–õ–æ–∫–∞—Ü–∏–∏: {lead_data.preferred_locations}")

                    if data_parts:
                        print(f"   üìä –î–∞–Ω–Ω—ã–µ: {' | '.join(data_parts)}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
                    if lead_data.asked_questions:
                        print(f"   üìã –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(lead_data.asked_questions)}):")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞
                        for j, question in enumerate(lead_data.asked_questions[-3:], 1):
                            print(f"      - {question}")

            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        await asyncio.sleep(0.5)

    print(f"\nüèÅ === –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final_lead = await memory_service.get_lead_data(session_id)
    if final_lead:
        print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:")
        print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {final_lead.current_dialog_state}")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(final_lead.asked_questions)}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: {final_lead.last_question_asked}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã
        unique_questions = set(final_lead.asked_questions)
        if len(final_lead.asked_questions) != len(unique_questions):
            print(f"‚ùå –ù–ê–ô–î–ï–ù–´ –ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –í–û–ü–†–û–°–´!")
            print(f"   - –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(final_lead.asked_questions)}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_questions)}")
            print(f"   - –ü–æ–≤—Ç–æ—Ä–æ–≤: {len(final_lead.asked_questions) - len(unique_questions)}")
        else:
            print(f"‚úÖ –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –í–û–ü–†–û–°–û–í –ù–ï –ù–ê–ô–î–ï–ù–û!")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏
    session_stats = session_manager.get_session_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:")
    print(f"   - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {session_stats['total_sessions']}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {session_stats['active_sessions']}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions_asked}")

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüéØ –ò–¢–û–ì–ò:")
    if duplicate_questions_found == 0:
        print(f"‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û! –ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
        return True
    else:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û {duplicate_questions_found} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return False

async def test_multiple_users():
    """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    print("=" * 70)

    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    memory_service = MemoryService(zep_api_key, enable_memory=True)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = [
        {"user_id": f"user_{uuid.uuid4().hex[:8]}", "chat_id": f"chat_{uuid.uuid4().hex[:8]}", "name": "–ê–ª–µ–∫—Å–µ–π"},
        {"user_id": f"user_{uuid.uuid4().hex[:8]}", "chat_id": f"chat_{uuid.uuid4().hex[:8]}", "name": "–ú–∞—Ä–∏—è"},
        {"user_id": f"user_{uuid.uuid4().hex[:8]}", "chat_id": f"chat_{uuid.uuid4().hex[:8]}", "name": "–î–º–∏—Ç—Ä–∏–π"},
    ]

    async def process_user(user_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_id = session_manager.generate_session_id(user_data["user_id"], user_data["chat_id"])

        messages = [
            f"–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç {user_data['name']}",
            "–•–æ—á—É –∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –°–æ—á–∏",
            "–î–æ–º, –¥–æ 3 –º–∏–ª–ª–∏–æ–Ω–æ–≤",
            "–í –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ",
        ]

        user_questions = []

        for message in messages:
            result = await memory_service.process_message(
                user_id=user_data["user_id"],
                message_text=message,
                message_type="user",
                chat_id=user_data["chat_id"],
                existing_session_id=session_id
            )

            if result.get('success'):
                recommendations = result.get('recommendations', {})
                questions = recommendations.get('next_questions', [])
                user_questions.extend(questions)

        return user_questions

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(
        *[process_user(user) for user in users]
    )

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    total_questions = 0
    total_duplicates = 0

    for i, (user_data, questions) in enumerate(zip(users, results)):
        unique_questions = set(questions)
        duplicates = len(questions) - len(unique_questions)

        print(f"   {user_data['name']}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤, {duplicates} –ø–æ–≤—Ç–æ—Ä–æ–≤")
        total_questions += len(questions)
        total_duplicates += duplicates

    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    print(f"   - –ü–æ–≤—Ç–æ—Ä–æ–≤: {total_duplicates}")
    print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {total_questions - total_duplicates}")

    return total_duplicates == 0

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 80)

    # –¢–µ—Å—Ç 1: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
    test1_passed = await test_realistic_conversation()

    # –¢–µ—Å—Ç 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test2_passed = await test_multiple_users()

    print(f"\nüèÜ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 80)

    if test1_passed and test2_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        if not test1_passed:
            print("‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω —Ç–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞")
        if not test2_passed:
            print("‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω —Ç–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")

if __name__ == "__main__":
    asyncio.run(main())