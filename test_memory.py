#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ Zep
"""
import asyncio
import os
from dotenv import load_dotenv
from bot.memory.memory_service import MemoryService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_memory_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º ZEP API –∫–ª—é—á
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API Key: {zep_api_key[:8]}...{zep_api_key[-4:]}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    try:
        memory_service = MemoryService(zep_api_key, enable_memory=True)
        print("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MemoryService: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_session_id = "test_user_123456"
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é: {test_session_id}")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_messages = [
        ("–ø—Ä–∏–≤–µ—Ç", "user"),
        ("–∞—Ä—Ç–µ–º", "user"), 
        ("–∏—â—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "user"),
        ("—Å–æ—á–∏", "user"),
        ("–ü–ú–ñ", "user"),
        ("–°–∏—Ä–∏—É—Å", "user"),
        ("–¥–æ–º", "user"),
        ("–∏–ø–æ—Ç–µ–∫–∞", "user")
    ]
    
    print("\nüìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    for message, msg_type in test_messages:
        try:
            result = await memory_service.process_message(
                user_id=test_session_id,
                message_text=message,
                message_type=msg_type
            )
            
            if result.get('success'):
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: '{message}' ({msg_type})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: '{message}' - {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ '{message}': {e}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    print(f"\nüìñ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞...")
    try:
        dialog_history = await memory_service.get_dialog_history(test_session_id, limit=10)
        
        if dialog_history:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
            for i, msg in enumerate(dialog_history, 1):
                role = msg.get('role', 'unknown')
                content = msg.get('content', '')
                speaker_name = msg.get('speaker_name', 'unknown')
                print(f"  {i}. {role} ({speaker_name}): {content}")
        else:
            print("‚ùå –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞
    print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞...")
    try:
        lead_data = await memory_service.get_lead_data(test_session_id)
        
        if lead_data:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –Ω–∞–π–¥–µ–Ω—ã:")
            print(f"  - –ò–º—è: {lead_data.name}")
            print(f"  - –ì–æ—Ä–æ–¥: {lead_data.current_location}")
            print(f"  - –¶–µ–ª—å: {lead_data.automation_goal}")
            print(f"  - –õ–æ–∫–∞—Ü–∏—è: {getattr(lead_data, 'preferred_locations', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"  - –°—Ç–∞—Ç—É—Å: {lead_data.qualification_status}")
            print(f"  - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {lead_data.current_dialog_state}")
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞: {e}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zep
    print(f"\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zep...")
    try:
        if memory_service.zep_client:
            memory = await memory_service.zep_client.memory.get(session_id=test_session_id)
            
            if memory and memory.messages:
                print(f"‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zep —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ {len(memory.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:")
                for i, msg in enumerate(memory.messages[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    print(f"  {i}. {msg.role_type} ({msg.role}): {msg.content[:50]}...")
            else:
                print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –≤ Zep –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print("‚ùå Zep –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zep: {e}")

if __name__ == "__main__":
    asyncio.run(test_memory_system())