#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.memory.extractors import LeadDataExtractor
from bot.memory.models import LeadData

def test_property_type_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    
    test_messages = [
        "–¥–æ–º, –¥–æ 5 –º–ª–Ω —Ä—É–±–ª–µ–π",
        "–∏—â—É –¥–æ–º –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ",
        "—Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É —É –º–æ—Ä—è",
        "–Ω—É–∂–Ω—ã –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –°–∏—Ä–∏—É—Å–µ", 
        "—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ –∑–∞—Å—Ç—Ä–æ–π–∫—É",
        "–¥–æ–º–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –°–æ—á–∏",
        "–ø–æ–∫—É–ø–∞—é –∫–æ—Ç—Ç–µ–¥–∂",
        "—Å—Ç—É–¥–∏—é –¥–ª—è —Å–¥–∞—á–∏"
    ]
    
    expected_results = [
        "–¥–æ–º",      # –¥–æ–º, –¥–æ 5 –º–ª–Ω —Ä—É–±–ª–µ–π
        "–¥–æ–º",      # –∏—â—É –¥–æ–º –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ  
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞", # —Ö–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É —É –º–æ—Ä—è
        "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã", # –Ω—É–∂–Ω—ã –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –°–∏—Ä–∏—É—Å–µ
        "—É—á–∞—Å—Ç–æ–∫",  # —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ –∑–∞—Å—Ç—Ä–æ–π–∫—É
        "–¥–æ–º",      # –¥–æ–º–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –°–æ—á–∏
        "–¥–æ–º",      # –ø–æ–∫—É–ø–∞—é –∫–æ—Ç—Ç–µ–¥–∂
        "–∫–≤–∞—Ä—Ç–∏—Ä–∞"  # —Å—Ç—É–¥–∏—é –¥–ª—è —Å–¥–∞—á–∏
    ]
    
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...")
    print("=" * 60)
    
    all_passed = True
    for i, (message, expected) in enumerate(zip(test_messages, expected_results)):
        lead = LeadData()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        updated_lead = LeadDataExtractor.extract_from_message(message, lead)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        actual = getattr(updated_lead, 'property_type', None)
        status = "‚úÖ" if actual == expected else "‚ùå"
        
        if actual != expected:
            all_passed = False
        
        print(f"{status} –¢–µ—Å—Ç {i+1}: '{message}'")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π: {expected}")
        print(f"   –ü–æ–ª—É—á–µ–Ω: {actual}")
        print()
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
    print()
    
    return all_passed

def test_system_context():
    """–¢–µ—Å—Ç —Ç–æ–≥–æ, –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    print("=" * 60)
    
    lead = LeadData()
    lead.name = "–ê—Ä—Ç–µ–º"
    lead.property_type = "–¥–æ–º"
    lead.budget_max = 5000000
    lead.preferred_locations = ["–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞"]
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    client_info = []
    if lead.name:
        client_info.append(f"–ò–º—è: {lead.name}")
    if getattr(lead, 'property_type', None):
        client_info.append(f"–¢–∏–ø: {lead.property_type}")
    if lead.budget_max:
        client_info.append(f"–ë—é–¥–∂–µ—Ç –¥–æ: {lead.budget_max} —Ä—É–±")
    if lead.preferred_locations:
        locations = ", ".join(lead.preferred_locations)
        client_info.append(f"–õ–æ–∫–∞—Ü–∏–∏: {locations}")
    
    context = f"–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: {' | '.join(client_info)}"
    
    print("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")
    print(context)
    print()
    
    if "–¢–∏–ø: –¥–æ–º" in context:
        print("‚úÖ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    else:
        print("‚ùå –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç")

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    extraction_passed = test_property_type_extraction()
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞  
    test_system_context()
    
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", "–†–ê–ë–û–¢–ê–ï–¢" if extraction_passed else "–ù–ï –†–ê–ë–û–¢–ê–ï–¢")