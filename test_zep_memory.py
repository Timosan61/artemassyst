#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ZEP Cloud –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –ê–ª–µ–Ω–∞
"""
import asyncio
import logging
import os
import sys
from datetime import datetime
from bot.config import ZEP_API_KEY
from bot.memory.analytics import AnalyticsService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_analytics_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AnalyticsService —Å ZEP Cloud"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AnalyticsService —Å ZEP Cloud...")
    
    if not ZEP_API_KEY:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API key: {ZEP_API_KEY[:20]}...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = AnalyticsService(ZEP_API_KEY)
        print("‚úÖ AnalyticsService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π session_id
        test_session_id = f"test_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        print(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {test_session_id}")
        
        # –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è...")
        await analytics.track_event(
            session_id=test_session_id,
            event_type="test_event",
            event_data={
                "test": True,
                "timestamp": datetime.now().isoformat(),
                "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ZEP Cloud"
            }
        )
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüîÑ –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        await analytics.track_event(
            session_id=test_session_id,
            event_type="state_change",
            event_data={
                "from": "s0_greeting",
                "to": "s1_business"
            }
        )
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\nüéØ –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        await analytics.track_event(
            session_id=test_session_id,
            event_type="qualification_change",
            event_data={
                "status": "hot"
            }
        )
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        print("\n‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ ZEP...")
        await asyncio.sleep(10)
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–∏
        print("\nüìã –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–∏...")
        events = await analytics.get_session_events(test_session_id, days=1)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        
        for i, event in enumerate(events):
            print(f"  {i+1}. {event.get('event_type', 'unknown')} - {event.get('timestamp', 'no_timestamp')}")
        
        # –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        print("\nüìä –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏...")
        funnel = await analytics.get_conversion_funnel(days=1)
        print("‚úÖ –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:")
        print(f"  - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {funnel.get('total_sessions', 0)}")
        print(f"  - –°–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π: {funnel.get('funnel_data', {}).get('s1_business', 0)}")
        print(f"  - –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: {funnel.get('funnel_data', {}).get('qualification_hot', 0)}")
        
        # –¢–µ—Å—Ç 6: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –¢–µ—Å—Ç 6: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
        daily_stats = await analytics.get_daily_stats(days=1)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {len(daily_stats)} –¥–Ω–µ–π")
        
        for stats in daily_stats:
            print(f"  - {stats.get('date', 'unknown')}: {stats.get('total_events', 0)} —Å–æ–±—ã—Ç–∏–π, {stats.get('unique_sessions', 0)} —Å–µ—Å—Å–∏–π")
        
        # –¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        print("\nüìÑ –¢–µ—Å—Ç 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        report = await analytics.generate_report(days=1)
        print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"  - –ü–µ—Ä–∏–æ–¥: {report.get('period', 'unknown')}")
        summary = report.get('summary', {})
        print(f"  - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {summary.get('total_sessions', 0)}")
        print(f"  - –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: {summary.get('hot_leads', 0)}")
        print(f"  - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: {summary.get('hot_lead_rate', 0):.1f}%")
        
        recommendations = report.get('recommendations', [])
        print(f"  - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        for rec in recommendations:
            print(f"    ‚Ä¢ {rec}")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã AnalyticsService –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AnalyticsService: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_zep_basic_connection():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ZEP Cloud"""
    print("\nüîå –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ZEP Cloud...")
    
    try:
        from zep_cloud.client import Zep
        
        client = Zep(api_key=ZEP_API_KEY)
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
        test_group_id = f"test_group_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        await asyncio.to_thread(
            client.group.add,
            group_id=test_group_id,
            name="Test Group",
            description="–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        )
        
        print(f"‚úÖ –ì—Ä—É–ø–ø–∞ {test_group_id} —Å–æ–∑–¥–∞–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "test": True,
            "timestamp": datetime.now().isoformat(),
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ZEP Cloud"
        }
        
        await asyncio.to_thread(
            client.graph.add,
            group_id=test_group_id,
            type="json",
            data=str(test_data)
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä–∞—Ñ")
        
        # –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫
        search_results = await asyncio.to_thread(
            client.graph.search,
            group_id=test_group_id,
            query="test",
            scope="episodes"
        )
        
        episodes_count = len(search_results.episodes) if search_results.episodes else 0
        print(f"‚úÖ –ü–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª {episodes_count} —ç–ø–∏–∑–æ–¥–æ–≤")
        
        print("üéâ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ZEP Cloud —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ZEP: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ZEP Cloud –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not ZEP_API_KEY:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return
    
    print(f"üîë ZEP API Key: {ZEP_API_KEY[:20]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_result = await test_zep_basic_connection()
    test2_result = await test_analytics_service()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  - –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ZEP: {'‚úÖ –£–°–ü–ï–•' if test1_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"  - AnalyticsService: {'‚úÖ –£–°–ü–ï–•' if test2_result else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if test1_result and test2_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("ZEP Cloud –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()