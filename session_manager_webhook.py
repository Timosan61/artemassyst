"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –≤–µ–±—Ö—É–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
"""
import time
import json
from typing import Dict, Optional, Any
from datetime import datetime, timedelta
from bot.memory.session_manager import session_manager

# –ö—ç—à —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
session_cache = {}
SESSION_TTL = 24 * 60 * 60  # 24 —á–∞—Å–∞

def get_or_create_session_id(user_id: str, chat_id: str, message_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id –¥–ª—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        chat_id: ID —á–∞—Ç–∞ Telegram
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

    Returns:
        –£–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id
    """
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ chat_id
    cache_key = f"{user_id}_{chat_id}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in session_cache:
        session_info = session_cache[cache_key]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if time.time() - session_info['created_at'] < SESSION_TTL:
            return session_info['session_id']
        else:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Å–µ—Å—Å–∏—é
            del session_cache[cache_key]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session_id = session_manager.generate_session_id(user_id, chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    session_cache[cache_key] = {
        'session_id': session_id,
        'user_id': user_id,
        'chat_id': chat_id,
        'created_at': time.time(),
        'last_message_id': message_id,
        'message_history': []
    }

    return session_id

def get_existing_session_id(user_id: str, chat_id: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π session_id –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        chat_id: ID —á–∞—Ç–∞ Telegram

    Returns:
        session_id –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ None
    """
    cache_key = f"{user_id}_{chat_id}"

    if cache_key in session_cache:
        session_info = session_cache[cache_key]
        if time.time() - session_info['created_at'] < SESSION_TTL:
            return session_info['session_id']

    return None

def record_message_in_session(user_id: str, chat_id: str, message_id: str,
                            text: str, message_type: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (user/assistant)
    """
    cache_key = f"{user_id}_{chat_id}"

    if cache_key in session_cache:
        session_info = session_cache[cache_key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in session_info['message_history']:
            if msg['message_id'] == message_id:
                return False  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        session_info['message_history'].append({
            'message_id': message_id,
            'text': text,
            'type': message_type,
            'timestamp': time.time()
        })

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(session_info['message_history']) > 50:
            session_info['message_history'] = session_info['message_history'][-50:]

        session_info['last_message_id'] = message_id
        return True

    return False

def is_duplicate_message(user_id: str, chat_id: str, message_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å
    """
    cache_key = f"{user_id}_{chat_id}"

    if cache_key in session_cache:
        session_info = session_cache[cache_key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in session_info['message_history']:
            if msg['message_id'] == message_id:
                return True

    return False

def get_session_stats() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
    total_sessions = len(session_cache)
    active_sessions = sum(1 for info in session_cache.values()
                         if time.time() - info['created_at'] < SESSION_TTL)

    return {
        'total_sessions': total_sessions,
        'active_sessions': active_sessions,
        'session_ttl_hours': SESSION_TTL / 3600
    }

def cleanup_expired_sessions():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –∫—ç—à–∞"""
    current_time = time.time()
    expired_keys = []

    for cache_key, session_info in session_cache.items():
        if current_time - session_info['created_at'] >= SESSION_TTL:
            expired_keys.append(cache_key)

    for cache_key in expired_keys:
        del session_cache[cache_key]

    return len(expired_keys)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ–±—Ö—É–∫–æ–º
def get_session_for_webhook(user_id: str, chat_id: str, message_id: str) -> tuple:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session_id –¥–ª—è –≤–µ–±—Ö—É–∫–∞

    Returns:
        tuple: (session_id, existing_session_id)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_duplicate_message(user_id, chat_id, message_id):
        return None, None

    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    existing_session_id = get_existing_session_id(user_id, chat_id)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    session_id = get_or_create_session_id(user_id, chat_id, message_id)

    return session_id, existing_session_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
def update_session_after_processing(user_id: str, chat_id: str, message_id: str,
                                  message_text: str, message_type: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    record_message_in_session(user_id, chat_id, message_id, message_text, message_type)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    cache_key = f"{user_id}_{chat_id}"
    if cache_key in session_cache:
        session_info = session_cache[cache_key]
        session_manager.update_session_activity(session_info['session_id'])

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ session_manager_webhook...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session_id, existing_id = get_session_for_webhook("123456", "789", "100")
    print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
    print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {existing_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
    is_dup = is_duplicate_message("123456", "789", "100")
    print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {is_dup}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = get_session_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")