#!/usr/bin/env python3
"""
–ß–∏—Å—Ç—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
"""
import asyncio
import os
import uuid
from dotenv import load_dotenv
from bot.memory.memory_service import MemoryService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_clean_conversation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º ZEP API –∫–ª—é—á
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API Key: {zep_api_key[:8]}...{zep_api_key[-4:]}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    memory_service = MemoryService(zep_api_key, enable_memory=True)
    print("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ù–æ–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è
    test_session_id = f"test_clean_{uuid.uuid4().hex[:8]}"
    print(f"üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é: {test_session_id}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ—à–∞–≥–æ–≤–æ
    messages = [
        ("–ø—Ä–∏–≤–µ—Ç", "user"),
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—â–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?", "assistant"),
        ("–∏–∑ –í–æ–ª–≥–æ–¥–æ–Ω—Å–∫–∞ –ø—Ä–∏–ª–µ—á—É –∑–∞–≤—Ç—Ä–∞", "user"),
        ("–û—Ç–ª–∏—á–Ω–æ! –í–æ–ª–≥–æ–¥–æ–Ω—Å–∫ —Ö–æ—Ä–æ—à–∏–π –≥–æ—Ä–æ–¥. –ö–∞–∫–∞—è —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏?", "assistant"),
        ("–¥–ª–∏–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "user"),
        ("–ü–æ–Ω—è—Ç–Ω–æ, –¥–ª–∏–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –ö–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", "assistant"),
        ("–¥–æ–º –≤ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª—è–Ω–µ –¥–æ 5 –º–ª–Ω", "user"),
    ]
    
    print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    for i, (message, msg_type) in enumerate(messages):
        print(f"\n--- –®–∞–≥ {i+1}: {msg_type} ---")
        print(f"üì® '{message}'")
        
        try:
            result = await memory_service.process_message(
                user_id=test_session_id,
                message_text=message,
                message_type=msg_type
            )
            
            if result.get('success'):
                lead_data = result.get('lead_data')
                current_state = result.get('current_state')
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                
                if lead_data:
                    data_parts = []
                    if lead_data.name:
                        data_parts.append(f"–ò–º—è: {lead_data.name}")
                    if getattr(lead_data, 'city', None):
                        data_parts.append(f"–ì–æ—Ä–æ–¥: {lead_data.city}")
                    if lead_data.automation_goal:
                        data_parts.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
                    if lead_data.budget_max:
                        data_parts.append(f"–ë—é–¥–∂–µ—Ç: –¥–æ {lead_data.budget_max}")
                    if getattr(lead_data, 'preferred_locations', None):
                        data_parts.append(f"–õ–æ–∫–∞—Ü–∏–∏: {lead_data.preferred_locations}")
                    if getattr(lead_data, 'property_type', None):
                        data_parts.append(f"–¢–∏–ø: {lead_data.property_type}")
                    if getattr(lead_data, 'urgency_date', None):
                        data_parts.append(f"–ü—Ä–∏–µ–∑–¥: {lead_data.urgency_date}")
                    
                    if data_parts:
                        print(f"   üìã –î–∞–Ω–Ω—ã–µ: {' | '.join(data_parts)}")
                    else:
                        print(f"   üìã –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                        
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print(f"\nüèÅ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        final_lead = await memory_service.get_lead_data(test_session_id)
        
        print(f"\nüìã –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:")
        if final_lead.name:
            print(f"   - –ò–º—è: {final_lead.name}")
        if getattr(final_lead, 'city', None):
            print(f"   - –ì–æ—Ä–æ–¥: {final_lead.city}")
        if final_lead.automation_goal:
            print(f"   - –¶–µ–ª—å: {final_lead.automation_goal.value}")
        if final_lead.budget_max:
            print(f"   - –ë—é–¥–∂–µ—Ç: –¥–æ {final_lead.budget_max} —Ä—É–±")
        if getattr(final_lead, 'preferred_locations', None):
            print(f"   - –õ–æ–∫–∞—Ü–∏–∏: {final_lead.preferred_locations}")
        if getattr(final_lead, 'property_type', None):
            print(f"   - –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {final_lead.property_type}")
        if getattr(final_lead, 'urgency_date', None):
            print(f"   - –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞: {final_lead.urgency_date}")
        print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ: {final_lead.current_dialog_state.value}")
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        if final_lead.city and final_lead.automation_goal and final_lead.budget_max:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(test_clean_conversation())