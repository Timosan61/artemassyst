#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
"""
import asyncio
import os
import uuid
from dotenv import load_dotenv
from bot.memory.memory_service import MemoryService
from bot.memory.session_manager import session_manager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_repetitive_questions_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤"""

    # –ü–æ–ª—É—á–∞–µ–º ZEP API –∫–ª—é—á
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API Key: {zep_api_key[:8]}...{zep_api_key[-4:]}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    memory_service = MemoryService(zep_api_key, enable_memory=True)
    print("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
    test_user_id = f"test_user_{uuid.uuid4().hex[:8]}"
    test_session_id = session_manager.generate_session_id(test_user_id)
    print(f"üÜî –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {test_session_id}")

    # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è –≤–æ–ø—Ä–æ—Å–∞–º–∏
    test_messages = [
        # –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª - —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        ("–ø—Ä–∏–≤–µ—Ç", "user"),
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—â–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?", "assistant"),
        ("–¥–ª—è —Å–µ–±—è", "user"),
        ("–ü–æ–Ω—è—Ç–Ω–æ, –¥–ª—è —Å–µ–±—è. –ö–∞–∫–∞—è —Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏?", "assistant"),
        ("–ø–º–∂", "user"),
        ("–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è –ü–ú–ñ. –ö–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", "assistant"),
        ("–¥–æ–º –≤ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–ª—è–Ω–µ", "user"),

        # –í—Ç–æ—Ä–æ–π —Ü–∏–∫–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        ("–ø—Ä–∏–≤–µ—Ç", "user"),  # –ü–æ–≤—Ç–æ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—â–µ—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ–±—è –∏–ª–∏ –∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é?", "assistant"),
        ("—è –∂–µ —É–∂–µ —Å–∫–∞–∑–∞–ª –¥–ª—è —Å–µ–±—è", "user"),
        ("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ. –ö–∞–∫—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?", "assistant"),
    ]

    print(f"\nüìù –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤...")

    asked_questions_history = []

    for i, (message, msg_type) in enumerate(test_messages):
        print(f"\n--- –®–∞–≥ {i+1}: {msg_type} ---")
        print(f"üì® '{message}'")

        try:
            result = await memory_service.process_message(
                user_id=test_user_id,
                message_text=message,
                message_type=msg_type,
                existing_session_id=test_session_id
            )

            if result.get('success'):
                lead_data = result.get('lead_data')
                current_state = result.get('current_state')
                recommendations = result.get('recommendations', {})

                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                next_questions = recommendations.get('next_questions', [])
                if next_questions:
                    print(f"   ‚ùì –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
                    for j, question in enumerate(next_questions):
                        print(f"      {j+1}. {question}")
                        asked_questions_history.append(question)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ LeadData
                if lead_data and lead_data.asked_questions:
                    print(f"   üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(lead_data.asked_questions)}):")
                    for j, question in enumerate(lead_data.asked_questions[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                        print(f"      - {question}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if lead_data:
                    data_parts = []
                    if lead_data.automation_goal:
                        data_parts.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
                    if lead_data.property_type:
                        data_parts.append(f"–¢–∏–ø: {lead_data.property_type}")
                    if lead_data.preferred_locations:
                        data_parts.append(f"–õ–æ–∫–∞—Ü–∏–∏: {lead_data.preferred_locations}")

                    if data_parts:
                        print(f"   üìä –î–∞–Ω–Ω—ã–µ: {' | '.join(data_parts)}")

            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    print(f"\nüèÅ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    session_stats = session_manager.get_session_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:")
    print(f"   - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {session_stats['total_sessions']}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Å—Å–∏—é: {session_stats['avg_questions_per_session']:.1f}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    session_info = session_manager.get_session_info(test_session_id)
    if session_info:
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏:")
        print(f"   - User ID: {session_info['user_id']}")
        print(f"   - –°–æ–∑–¥–∞–Ω–∞: {session_info['created_at']}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {session_info['last_activity']}")
        print(f"   - –ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {len(session_info['question_history'])}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final_lead = await memory_service.get_lead_data(test_session_id)
    if final_lead:
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:")
        print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {final_lead.current_dialog_state}")
        print(f"   - –ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {len(final_lead.asked_questions)}")
        print(f"   - –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: {final_lead.last_question_asked}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã
        unique_questions = set(final_lead.asked_questions)
        if len(final_lead.asked_questions) != len(unique_questions):
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã!")
            print(f"   - –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(final_lead.asked_questions)}")
            print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(unique_questions)}")
        else:
            print(f"‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(test_repetitive_questions_fix())