#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ZEP
"""
import asyncio
import logging
from datetime import datetime
from typing import List, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
from bot.agent import AlenaAgent
from bot.memory.models import DialogState, ClientType

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
TEST_MESSAGES = [
    # S0_GREETING -> S1_BUSINESS
    ("–î–ª—è —Å–µ–±—è —Ö–æ—á—É –∫—É–ø–∏—Ç—å", "S0_GREETING -> S1_BUSINESS (—Ü–µ–ª—å –ø–æ–∫—É–ø–∫–∏)"),

    # S1_BUSINESS -> S2_GOAL
    ("–Ø –∏–∑ –ú–æ—Å–∫–≤—ã, –≤ –°–æ—á–∏ –Ω–µ –±—ã–ª", "S1_BUSINESS -> S2_GOAL (–≥–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω)"),

    # S2_GOAL -> S3_PAYMENT
    ("–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏—â—É", "S2_GOAL -> S3_PAYMENT (—Ü–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)"),

    # S3_PAYMENT -> S4_REQUIREMENTS
    ("–ò–ø–æ—Ç–µ–∫–∞ –æ—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞ –±—É–¥–µ—Ç", "S3_PAYMENT -> S4_REQUIREMENTS (—Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã)"),

    # S4_REQUIREMENTS -> S5_BUDGET
    ("–•–æ—á—É –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã", "S4_REQUIREMENTS -> S5_BUDGET (–ª–æ–∫–∞—Ü–∏—è –∏ —Ç–∏–ø)"),

    # S5_BUDGET -> S6_URGENCY
    ("–ë—é–¥–∂–µ—Ç –æ—Ç 15 –¥–æ 20 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —Ä—É–±–ª–µ–π", "S5_BUDGET -> S6_URGENCY (–±—é–¥–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)"),

    # S6_URGENCY -> S7_EXPERIENCE
    ("–ü–ª–∞–Ω–∏—Ä—É—é –ø—Ä–∏–µ—Ö–∞—Ç—å –≤ —Ñ–µ–≤—Ä–∞–ª–µ 2025", "S6_URGENCY -> S7_EXPERIENCE (—Å—Ä–æ—á–Ω–æ—Å—Ç—å)"),

    # S7_EXPERIENCE -> S8_ACTION
    ("–í –°–æ—á–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∫—É–ø–∞–ª, –ø–µ—Ä–≤—ã–π —Ä–∞–∑", "S7_EXPERIENCE -> S8_ACTION (–æ–ø—ã—Ç)"),

    # S8_ACTION - —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ("–î–∞, –≥–æ—Ç–æ–≤ –∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–∫–∞–∑—É", "S8_ACTION (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–æ–∫–∞–∑—É)"),
]

async def test_dialog_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π"""

    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ú–ï–ù–´ –°–û–°–¢–û–Ø–ù–ò–ô –î–ò–ê–õ–û–ì–ê")
    print("=" * 80)

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = AlenaAgent()

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id –¥–ª—è —Ç–µ—Å—Ç–∞
    test_session_id = f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    test_user_name = "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    print(f"\nüìù Session ID: {test_session_id}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user_name}\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    dialog_history = []

    for i, (user_message, expected_transition) in enumerate(TEST_MESSAGES, 1):
        print(f"\n{'='*60}")
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(TEST_MESSAGES)}")
        print(f"{'='*60}")
        print(f"üë§ USER: {user_message}")
        print(f"üìä –û–∂–∏–¥–∞–µ–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥: {expected_transition}")

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            bot_response = await agent.generate_response(
                user_message=user_message,
                session_id=test_session_id,
                user_name=test_user_name,
                existing_session_id=test_session_id  # –í–∞–∂–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ session_id
            )

            print(f"\nü§ñ BOT: {bot_response[:200]}...")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
            memory_insights = await agent.get_memory_insights(test_session_id)

            if memory_insights:
                current_state = memory_insights.get('current_state', 'unknown')
                qualification = memory_insights.get('qualification_status', 'unknown')
                lead_data = memory_insights.get('lead_data', {})

                print(f"\nüìç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                print(f"üéØ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {qualification}")

                # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if lead_data:
                    print(f"\nüìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    if lead_data.get('name'):
                        print(f"  ‚Ä¢ –ò–º—è: {lead_data['name']}")
                    if lead_data.get('city'):
                        print(f"  ‚Ä¢ –ì–æ—Ä–æ–¥: {lead_data['city']}")
                    if lead_data.get('automation_goal'):
                        print(f"  ‚Ä¢ –¶–µ–ª—å: {lead_data['automation_goal']}")
                    if lead_data.get('payment_type'):
                        print(f"  ‚Ä¢ –û–ø–ª–∞—Ç–∞: {lead_data['payment_type']}")
                    if lead_data.get('preferred_locations'):
                        print(f"  ‚Ä¢ –õ–æ–∫–∞—Ü–∏–∏: {', '.join(lead_data['preferred_locations'])}")
                    if lead_data.get('property_type'):
                        print(f"  ‚Ä¢ –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: {lead_data['property_type']}")
                    if lead_data.get('budget_min') or lead_data.get('budget_max'):
                        print(f"  ‚Ä¢ –ë—é–¥–∂–µ—Ç: {lead_data.get('budget_min', 0)}-{lead_data.get('budget_max', '‚àû')}")
                    if lead_data.get('urgency_date'):
                        print(f"  ‚Ä¢ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {lead_data['urgency_date']}")
                    if lead_data.get('sochi_experience'):
                        print(f"  ‚Ä¢ –û–ø—ã—Ç –≤ –°–æ—á–∏: {lead_data['sochi_experience']}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            dialog_history.append({
                'message_num': i,
                'user': user_message,
                'bot': bot_response[:100],
                'state': current_state,
                'qualification': qualification
            })

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(1)

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {e}")

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}\n")

    print("üîÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
    for entry in dialog_history:
        print(f"  {entry['message_num']}. {entry['state']} ({entry['qualification']})")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    final_insights = await agent.get_memory_insights(test_session_id)
    if final_insights:
        final_state = final_insights.get('current_state', 'unknown')
        final_qualification = final_insights.get('qualification_status', 'unknown')
        should_escalate = final_insights.get('should_escalate', False)

        print(f"\n‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {final_state}")
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {final_qualification}")
        print(f"‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è —ç—Å–∫–∞–ª–∞—Ü–∏—è: {'–î–ê üî•' if should_escalate else '–ù–ï–¢'}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if final_state == 'S8_ACTION':
            print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ S8_ACTION")
        else:
            print(f"\n‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –û–∂–∏–¥–∞–ª–æ—Å—å S8_ACTION, –ø–æ–ª—É—á–µ–Ω–æ {final_state}")

async def test_state_persistence():
    """–¢–µ—Å—Ç –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""

    print("\n" + "=" * 80)
    print("üß™ –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–Ø")
    print("=" * 80)

    agent = AlenaAgent()
    test_session_id = f"persistence_test_{datetime.now().strftime('%H%M%S')}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    response1 = await agent.generate_response(
        "–î–ª—è —Å–µ–±—è –∏—â—É",
        test_session_id,
        "–¢–µ—Å—Ç Persistence"
    )

    insights1 = await agent.get_memory_insights(test_session_id)
    state1 = insights1.get('current_state', 'unknown')
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ 1-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {state1}")

    # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
    await asyncio.sleep(2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    response2 = await agent.generate_response(
        "–Ø –∏–∑ –í–æ–ª–≥–æ–≥—Ä–∞–¥–∞",
        test_session_id,
        "–¢–µ—Å—Ç Persistence",
        existing_session_id=test_session_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ session_id
    )

    insights2 = await agent.get_memory_insights(test_session_id)
    state2 = insights2.get('current_state', 'unknown')
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ 2-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {state2}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" in response2 or "–Ø –ê–ª–µ–Ω–∞" in response2:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ë–æ—Ç —Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è! –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ!")
        print(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response2[:200]}")
    else:
        print("\n‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥")
        print(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response2[:200]}")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""

    print("\nüöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –°–û–°–¢–û–Ø–ù–ò–ô\n")

    # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–∏–∞–ª–æ–≥–∞
    await test_dialog_flow()

    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await test_state_persistence()

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")

if __name__ == "__main__":
    asyncio.run(main())