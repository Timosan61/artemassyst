#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –±–æ—Ç–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
"""

import sys
import os
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import asyncio
from collections import defaultdict, Counter

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def load_dialog_logs(days_back: int = 7) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    logs_dir = Path("logs/dialogs")
    if not logs_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return []

    messages = []
    cutoff_date = datetime.now() - timedelta(days=days_back)

    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    for log_file in logs_dir.glob("dialogs_*.jsonl"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            date_str = log_file.stem.replace("dialogs_", "")
            file_date = datetime.strptime(date_str, "%Y-%m-%d")

            if file_date >= cutoff_date:
                print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ {log_file.name}...")
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip():
                            try:
                                message = json.loads(line.strip())
                                messages.append(message)
                            except json.JSONDecodeError:
                                continue
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {log_file}: {e}")

    return sorted(messages, key=lambda x: x.get('timestamp', ''))

def analyze_user_journey(messages: List[Dict], user_id: str = None) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""
    if user_id:
        user_messages = [m for m in messages if m.get('user_id') == user_id]
    else:
        user_messages = messages

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_journeys = defaultdict(list)
    for msg in user_messages:
        if 'user_id' in msg and 'state' in msg:
            user_journeys[msg['user_id']].append({
                'timestamp': msg['timestamp'],
                'state': msg['state'],
                'message_type': msg['message_type'],
                'text': msg['text'][:100] + '...' if len(msg['text']) > 100 else msg['text']
            })

    return dict(user_journeys)

def analyze_state_transitions(messages: List[Dict]) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    transitions = defaultdict(int)
    state_durations = defaultdict(list)
    user_states = defaultdict(list)

    for msg in messages:
        if 'user_id' in msg and 'state' in msg and msg.get('message_type') == 'user':
            user_id = msg['user_id']
            state = msg['state']
            timestamp = msg['timestamp']

            user_states[user_id].append({
                'state': state,
                'timestamp': timestamp
            })

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, states in user_states.items():
        states.sort(key=lambda x: x['timestamp'])

        for i in range(1, len(states)):
            prev_state = states[i-1]['state']
            curr_state = states[i]['state']

            if prev_state != curr_state:
                transition_key = f"{prev_state} ‚Üí {curr_state}"
                transitions[transition_key] += 1

                # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                try:
                    prev_time = datetime.fromisoformat(states[i-1]['timestamp'])
                    curr_time = datetime.fromisoformat(states[i]['timestamp'])
                    duration = (curr_time - prev_time).total_seconds()
                    state_durations[prev_state].append(duration)
                except:
                    continue

    return {
        'transitions': dict(transitions),
        'state_durations': {
            state: {
                'count': len(durations),
                'avg_duration': sum(durations) / len(durations) if durations else 0,
                'min_duration': min(durations) if durations else 0,
                'max_duration': max(durations) if durations else 0
            }
            for state, durations in state_durations.items()
        }
    }

def analyze_qualification_progress(messages: List[Dict]) -> Dict:
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    qualification_changes = defaultdict(list)

    for msg in messages:
        if 'user_id' in msg and 'qualification' in msg:
            user_id = msg['user_id']
            qualification = msg['qualification']
            timestamp = msg['timestamp']

            qualification_changes[user_id].append({
                'qualification': qualification,
                'timestamp': timestamp
            })

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
    progression = {'COLD‚ÜíWARM': 0, 'WARM‚ÜíHOT': 0, 'COLD‚ÜíHOT': 0}
    current_qualifications = Counter()

    for user_id, changes in qualification_changes.items():
        changes.sort(key=lambda x: x['timestamp'])

        if changes:
            # –¢–µ–∫—É—â–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
            current_qualifications[changes[-1]['qualification']] += 1

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
            qualifications = [c['qualification'] for c in changes]
            unique_qualifications = []

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
            for q in qualifications:
                if not unique_qualifications or unique_qualifications[-1] != q:
                    unique_qualifications.append(q)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
            for i in range(1, len(unique_qualifications)):
                prev_qual = unique_qualifications[i-1]
                curr_qual = unique_qualifications[i]
                transition_key = f"{prev_qual}‚Üí{curr_qual}"
                if transition_key in progression:
                    progression[transition_key] += 1

    return {
        'current_qualifications': dict(current_qualifications),
        'progression': progression
    }

def find_problem_dialogs(messages: List[Dict]) -> List[Dict]:
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (–∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)"""
    problems = []
    user_dialogs = defaultdict(list)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for msg in messages:
        if 'user_id' in msg:
            user_dialogs[msg['user_id']].append(msg)

    for user_id, user_messages in user_dialogs.items():
        user_messages.sort(key=lambda x: x.get('timestamp', ''))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_count = 0
        s0_greetings = []

        for msg in user_messages:
            if (msg.get('message_type') == 'assistant' and
                msg.get('state') == 'S0_GREETING' and
                '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ' in msg.get('text', '')):
                greeting_count += 1
                s0_greetings.append({
                    'timestamp': msg['timestamp'],
                    'text': msg['text'][:100] + '...'
                })

        if greeting_count > 1:
            problems.append({
                'user_id': user_id,
                'type': 'multiple_greetings',
                'count': greeting_count,
                'details': s0_greetings,
                'severity': 'high' if greeting_count > 3 else 'medium'
            })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states_sequence = []
        for msg in user_messages:
            if msg.get('message_type') == 'user' and 'state' in msg:
                states_sequence.append(msg['state'])

        # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥—Ä—è–¥
        repeated_states = []
        current_state = None
        repeat_count = 0

        for state in states_sequence:
            if state == current_state:
                repeat_count += 1
            else:
                if repeat_count > 2:  # –ë–æ–ª–µ–µ 2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
                    repeated_states.append({
                        'state': current_state,
                        'count': repeat_count
                    })
                current_state = state
                repeat_count = 1

        if repeated_states:
            problems.append({
                'user_id': user_id,
                'type': 'stuck_in_state',
                'details': repeated_states,
                'severity': 'high'
            })

    return problems

def generate_report(messages: List[Dict], output_file: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not messages:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

    total_messages = len(messages)
    unique_users = len(set(msg.get('user_id') for msg in messages if 'user_id' in msg))
    date_range = {
        'from': min(msg.get('timestamp', '') for msg in messages),
        'to': max(msg.get('timestamp', '') for msg in messages)
    }

    # –ê–Ω–∞–ª–∏–∑—ã
    state_analysis = analyze_state_transitions(messages)
    qualification_analysis = analyze_qualification_progress(messages)
    problems = find_problem_dialogs(messages)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
    message_types = Counter(msg.get('message_type') for msg in messages)
    states_stats = Counter(msg.get('state') for msg in messages if 'state' in msg)

    report = f"""
üìä –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –î–ò–ê–õ–û–ì–û–í
{'=' * 50}

üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {date_range['from'][:10]} - {date_range['to'][:10]}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {total_messages / unique_users:.1f}

üìù –¢–ò–ü–´ –°–û–û–ë–©–ï–ù–ò–ô:
"""
    for msg_type, count in message_types.most_common():
        report += f"‚Ä¢ {msg_type}: {count}\n"

    report += f"\nüéØ –°–û–°–¢–û–Ø–ù–ò–Ø –î–ò–ê–õ–û–ì–û–í:\n"
    for state, count in states_stats.most_common():
        report += f"‚Ä¢ {state}: {count}\n"

    report += f"\nüîÑ –ü–ï–†–ï–•–û–î–´ –ú–ï–ñ–î–£ –°–û–°–¢–û–Ø–ù–ò–Ø–ú–ò:\n"
    for transition, count in sorted(state_analysis['transitions'].items(),
                                   key=lambda x: x[1], reverse=True)[:10]:
        report += f"‚Ä¢ {transition}: {count} —Ä–∞–∑\n"

    report += f"\nüìä –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í:\n"
    for qual, count in qualification_analysis['current_qualifications'].items():
        report += f"‚Ä¢ {qual}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

    report += f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n"
    for progression, count in qualification_analysis['progression'].items():
        if count > 0:
            report += f"‚Ä¢ {progression}: {count} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n"

    if problems:
        report += f"\nüö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –î–ò–ê–õ–û–ì–ò ({len(problems)}):\n"
        for problem in problems[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –ø—Ä–æ–±–ª–µ–º
            report += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {problem['user_id']}: {problem['type']} "
            report += f"({problem.get('count', len(problem.get('details', [])))})\n"

    if output_file:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(report)
        report += f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}\n"

    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    import argparse

    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –±–æ—Ç–∞")
    parser.add_argument("--days", type=int, default=7,
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)")
    parser.add_argument("--user", type=str,
                       help="–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    parser.add_argument("--output", type=str,
                       help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
    parser.add_argument("--problems-only", action="store_true",
                       help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏")

    args = parser.parse_args()

    print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {args.days} –¥–Ω–µ–π...")
    messages = load_dialog_logs(args.days)

    if not messages:
        print("‚ùå –õ–æ–≥–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

    if args.problems_only:
        problems = find_problem_dialogs(messages)
        if problems:
            print(f"\nüö® –ù–∞–π–¥–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:\n")
            for problem in problems:
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {problem['user_id']}")
                print(f"üîç –ü—Ä–æ–±–ª–µ–º–∞: {problem['type']}")
                print(f"‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {problem['severity']}")
                if problem['type'] == 'multiple_greetings':
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: {problem['count']}")
                print("---")
        else:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    elif args.user:
        user_journey = analyze_user_journey(messages, args.user)
        if args.user in user_journey:
            print(f"\nüë§ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {args.user}:\n")
            for msg in user_journey[args.user]:
                msg_type = "üë§" if msg['message_type'] == 'user' else "ü§ñ"
                print(f"{msg_type} [{msg['state']}] {msg['timestamp'][:19]}")
                print(f"   {msg['text']}\n")
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args.user} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    else:
        report = generate_report(messages, args.output)
        print(report)

if __name__ == "__main__":
    main()