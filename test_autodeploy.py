#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è
"""

import subprocess
import requests
import time
from datetime import datetime

GITHUB_REPO = "Timosan61/artemassyst"

def create_test_commit():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è"""
    print("üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ö–û–ú–ú–ò–¢–ê:")
    
    try:
        # –°–æ–∑–¥–∞–µ–º empty commit —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        commit_message = f"test: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è {timestamp}"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º git –∫–æ–º–∞–Ω–¥—ã
        subprocess.run(["git", "add", "."], check=True)
        subprocess.run(["git", "commit", "--allow-empty", "-m", commit_message], check=True)
        subprocess.run(["git", "push", "origin", "main"], check=True)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: {commit_message}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {e}")
        return False

def check_latest_commit():
    """–ü–æ–ª—É—á–∏—Ç—å SHA –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞"""
    try:
        response = requests.get(f"https://api.github.com/repos/{GITHUB_REPO}/commits", 
                               params={"per_page": 1})
        if response.status_code == 200:
            commits = response.json()
            if commits:
                return commits[0]['sha']
        return None
    except:
        return None

def monitor_for_deployment(initial_sha, timeout_minutes=10):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–µ–ø–ª–æ—è"""
    print(f"\n‚è≥ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–í–¢–û–î–ï–ü–õ–û–Ø (–º–∞–∫—Å. {timeout_minutes} –º–∏–Ω):")
    print(f"üîç –û–∂–∏–¥–∞–µ–º –¥–µ–ø–ª–æ–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞: {initial_sha[:8]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ webhook –≤ GitHub
    print("\nüìã –ü–†–û–í–ï–†–¨–¢–ï WEBHOOK –í GITHUB:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://github.com/Timosan61/artemassyst/settings/hooks")
    print("2. –ù–∞–π–¥–∏—Ç–µ webhook –¥–ª—è Digital Ocean App Platform")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω (–∑–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞)")
    print("4. URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: hooks.digitalocean.com")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Digital Ocean –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("\nüìã –ü–†–û–í–ï–†–¨–¢–ï DIGITAL OCEAN:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://cloud.digitalocean.com/apps")
    print("2. –í—ã–±–µ—Ä–∏—Ç–µ artemassyst")
    print("3. –í–æ –≤–∫–ª–∞–¥–∫–µ 'Activity' –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π")
    print("4. –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –Ω–∞ 'Building...'")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
    for minute in range(timeout_minutes):
        time.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É
        
        current_sha = check_latest_commit()
        if current_sha and current_sha != initial_sha:
            print(f"‚úÖ [{minute+1} –º–∏–Ω] –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {current_sha[:8]}")
        
        print(f"‚è∞ [{minute+1}/{timeout_minutes} –º–∏–Ω] –ú–æ–Ω–∏—Ç–æ—Ä–∏–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        try:
            response = requests.get("https://artemassyst-bot-tt5dt.ondigitalocean.app/", timeout=10)
            if response.status_code == 200:
                data = response.json()
                last_update = data.get('debug_info', {}).get('version_info', {}).get('last_commit_sha', '')
                if last_update.startswith(initial_sha[:8]):
                    print(f"üéâ –ê–í–¢–û–î–ï–ü–õ–û–ô –†–ê–ë–û–¢–ê–ï–¢! –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–º–º–∏—Ç–æ–º {initial_sha[:8]}")
                    return True
        except:
            pass
    
    print(f"‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è {timeout_minutes} –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–æ")
    return False

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –î–ï–ü–õ–û–Ø")
    print("="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA
    initial_sha = check_latest_commit()
    if not initial_sha:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö")
        return
    
    print(f"üìä –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: {initial_sha[:8]}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç
    if not create_test_commit():
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π SHA
    new_sha = check_latest_commit()
    if not new_sha or new_sha == initial_sha:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ GitHub")
        return
    
    print(f"üìä –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç: {new_sha[:8]}")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∞–≤—Ç–æ–¥–µ–ø–ª–æ–π
    success = monitor_for_deployment(new_sha)
    
    print("\n" + "="*50)
    if success:
        print("‚úÖ –ê–í–¢–û–î–ï–ü–õ–û–ô –†–ê–ë–û–¢–ê–ï–¢ –ò–°–ü–†–ê–í–ù–û!")
    else:
        print("‚ùå –ê–í–¢–û–î–ï–ü–õ–û–ô –ù–ï –°–†–ê–ë–û–¢–ê–õ")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub integration –≤ Digital Ocean")
    print("="*50)

if __name__ == "__main__":
    main()