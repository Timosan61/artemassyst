#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ "–ê–ª—ë–Ω–∞"
"""
import asyncio
import json
from bot.memory import MemoryService, DialogState, ClientType

async def test_memory_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏ –≤ –¥–µ–π—Å—Ç–≤–∏–∏"""
    print("üß† –¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ '–ê–ª—ë–Ω–∞'\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ ZEP)
    memory_service = MemoryService("test_key", enable_memory=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–ª–æ–≥–∞
    session_id = "test_user_123"
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
        "–£ –º–µ–Ω—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≤ –ú–æ—Å–∫–≤–µ", 
        "–•–æ—á—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏",
        "–ì–æ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –¥–æ $1000 –Ω–∞ —Ö–æ—Ä–æ—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ",
        "–ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–µ–π CRM —Å–∏—Å—Ç–µ–º–æ–π",
        "–ö–æ–≥–¥–∞ –º–æ–∂–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ? –ì–æ—Ç–æ–≤ –∑–∞–≤—Ç—Ä–∞"
    ]
    
    print("üìù –°–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞:\n")
    
    for i, message in enumerate(test_messages, 1):
        print(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ {i}: {message}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        result = await memory_service.process_message(session_id, message)
        
        if result['success']:
            lead_data = result['lead_data']
            current_state = result['current_state']
            qualification_status = result['qualification_status']
            recommendations = result['recommendations']
            
            print(f"ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state.value}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {qualification_status.value}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            extracted_info = []
            if lead_data.business_sphere:
                extracted_info.append(f"–°—Ñ–µ—Ä–∞: {lead_data.business_sphere}")
            if lead_data.automation_goal:
                extracted_info.append(f"–¶–µ–ª—å: {lead_data.automation_goal.value}")
            if lead_data.budget_max:
                extracted_info.append(f"–ë—é–¥–∂–µ—Ç: –¥–æ ${lead_data.budget_max}")
            if lead_data.technical_requirements:
                extracted_info.append(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {', '.join(lead_data.technical_requirements)}")
            
            if extracted_info:
                print(f"üìã –î–∞–Ω–Ω—ã–µ: {' | '.join(extracted_info)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if recommendations.get('next_questions'):
                print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations['next_questions'][0]}")
            
            if result.get('should_escalate'):
                print("üî• –≠–°–ö–ê–õ–ê–¶–ò–Ø: –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
        
        print("-" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
    
    final_lead = await memory_service.get_lead_data(session_id)
    if final_lead:
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {_calculate_completeness(final_lead):.1%}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {final_lead.qualification_status.value if final_lead.qualification_status else '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
        print(f"üìà –≠—Ç–∞–ø: {final_lead.current_dialog_state.value}")
        
        if memory_service._should_escalate(final_lead):
            print("üö® –ì–û–¢–û–í –ö –≠–°–ö–ê–õ–ê–¶–ò–ò")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    analytics_summary = await memory_service.get_analytics_summary(session_id)
    if analytics_summary:
        print(f"\nüìà –°–æ–±—ã—Ç–∏—è: {analytics_summary.get('total_events', 0)}")
        print(f"üîÑ –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {analytics_summary.get('data_completeness', 0):.1%}")
        print(f"‚ö° –°–∫–æ—Ä —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {analytics_summary.get('escalation_score', 0):.1%}")

def _calculate_completeness(lead_data):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö"""
    total_fields = 10
    filled = 0
    
    if lead_data.business_sphere: filled += 1
    if lead_data.automation_goal: filled += 1
    if lead_data.budget_max: filled += 1
    if lead_data.technical_requirements: filled += 1
    if lead_data.urgency_level: filled += 1
    if lead_data.qualification_status: filled += 1
    # ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    
    return filled / total_fields

if __name__ == "__main__":
    asyncio.run(test_memory_system())