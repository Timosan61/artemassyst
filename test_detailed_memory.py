#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import asyncio
import os
from dotenv import load_dotenv
from bot.memory.memory_service import MemoryService

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_specific_conversation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ Telegram"""
    
    # –ü–æ–ª—É—á–∞–µ–º ZEP API –∫–ª—é—á
    zep_api_key = os.getenv('ZEP_API_KEY')
    if not zep_api_key:
        print("‚ùå ZEP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ZEP API Key: {zep_api_key[:8]}...{zep_api_key[-4:]}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–∞–º—è—Ç–∏
    memory_service = MemoryService(zep_api_key, enable_memory=True)
    print("‚úÖ MemoryService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    import time
    test_session_id = f"test_fixed_conversation_{int(time.time())}"  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥
    conversation = [
        ("–ø—Ä–∏–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º", "user"),
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê—Ä—Ç–µ–º! –ö–æ–Ω–µ—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º...", "assistant"),
        ("–∫—Ä–∞—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞", "user"),
        ("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞...", "assistant"),
        ("–¥–æ–º, –¥–æ 5 –º–ª–Ω —Ä—É–±–ª–µ–π", "user"),
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ! –î–æ–º –¥–æ 5 –º–∏–ª–ª–∏–æ–Ω–æ–≤...", "assistant"),
        ("–∏–∑ –í–æ–ª–≥–æ–¥–æ–Ω—Å–∫ –Ω–∞ —Å—É–ø–µ—Ä –¥–∂–µ—Ç–µ –ø—Ä–∏–ª–µ—á—É", "user"),
        ("–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...", "assistant"),
        ("–∑–∞–≤—Ç—Ä–∞ –±—É–¥—É –∏–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞ , –Ω–µ–∑–Ω–∞—é", "user"),
        ("–ü–æ–Ω—è–ª–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ...", "assistant"),
        ("–∫–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é", "user"),
        ("–û—Ç–ª–∏—á–Ω–æ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å...", "assistant"),
        ("–¥–ª–∏–Ω–Ω—ã–µ", "user"),
        ("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ! –î–ª–∏–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏...", "assistant")
    ]
    
    print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥...")
    lead_data = None
    
    for i, (message, msg_type) in enumerate(conversation):
        print(f"\n--- –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {msg_type} ---")
        print(f"üì® '{message[:50]}...'")
        
        try:
            result = await memory_service.process_message(
                user_id=test_session_id,
                message_text=message,
                message_type=msg_type
            )
            
            if result.get('success'):
                lead_data = result.get('lead_data')
                current_state = result.get('current_state')
                
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–≤–ª–µ–∫–ª–∏
                if lead_data:
                    print(f"   üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:")
                    if lead_data.name:
                        print(f"      - –ò–º—è: {lead_data.name}")
                    if hasattr(lead_data, 'city') and lead_data.city:
                        print(f"      - –ì–æ—Ä–æ–¥: {lead_data.city}")
                    if lead_data.automation_goal:
                        print(f"      - –¶–µ–ª—å: {lead_data.automation_goal}")
                    if lead_data.budget_max:
                        print(f"      - –ë—é–¥–∂–µ—Ç –¥–æ: {lead_data.budget_max}")
                    if hasattr(lead_data, 'preferred_locations'):
                        print(f"      - –õ–æ–∫–∞—Ü–∏–∏: {lead_data.preferred_locations}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 429 Too Many Requests
        await asyncio.sleep(0.5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"\nüèÅ === –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
        final_lead = await memory_service.get_lead_data(test_session_id)
        
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞:")
        print(f"   - –ò–º—è: {final_lead.name}")
        print(f"   - –ì–æ—Ä–æ–¥: {getattr(final_lead, 'city', '–ù–ï –°–û–•–†–ê–ù–ï–ù')}")
        print(f"   - –¶–µ–ª—å: {final_lead.automation_goal}")
        print(f"   - –ë—é–¥–∂–µ—Ç: {final_lead.budget_min}-{final_lead.budget_max}")
        print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {final_lead.current_dialog_state}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = await memory_service.get_dialog_history(test_session_id, limit=20)
        print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ–¥–µ
        print(f"\nüîç –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≥–æ—Ä–æ–¥–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏:")
        for msg in history:
            if '–≤–æ–ª–≥–æ–¥–æ–Ω—Å–∫' in msg.get('content', '').lower():
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {msg.get('content')[:100]}...")
            if '—Å–æ—á–∏' in msg.get('content', '').lower():
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ –°–æ—á–∏: {msg.get('content')[:100]}...")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    print("\n" + "="*50)
    print("üéØ –í–´–í–û–î: –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –ù–ï –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π!")
    print("         –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤ LeadDataExtractor")

if __name__ == "__main__":
    asyncio.run(test_specific_conversation())